/**
 *
 */
import Util;
import ROAUtil;
import Credential;
import AccessTokenCredential;

type @domainId = string
type @region = string
type @endpoint = string
type @protocol = string
type @nickname = string
type @userAgent = string
type @credential = Credential
type @accessTokenCredential = AccessTokenCredential

model RuntimeOptions {
  autoretry?: boolean(description='whether to try again', name='autoretry'),
  ignoreSSL?: boolean(description='ignore SSL validation', name='ignoreSSL'),
  maxAttempts?: number(description='maximum number of retries', name='maxAttempts'),
  backoffPolicy?: string(description='backoff policy', name='backoffPolicy'),
  backoffPeriod?: number(description='backoff period', name='backoffPeriod'),
  readTimeout?: number(description='read timeout', name='readTimeout'),
  connectTimeout?: number(description='connect timeout', name='connectTimeout'),
  httpProxy?: string(description='http proxy url', name='httpProxy'),
  httpsProxy?: string(description='https Proxy url', name='httpsProxy'),
  noProxy?: string(description='agent blacklist', name='noProxy'),
  maxIdleConns?: number(description='maximum number of connections', name='maxIdleConns'),
  localAddr?: string(description='local addr', name='localAddr'),
  socks5Proxy?: string(description='SOCKS5 proxy', name='socks5Proxy'),
  socks5NetWork?: string(description='SOCKS5 netWork', name='socks5NetWork'),
}

model Config {
  endpoint?: string,
  region?: string,
  domainId: string,
  protocol?: string,
  type?: string,
  securityToken?: string,
  accessKeyId?: string,
  accessKeySecret?: string,
  clientId?: string,
  refreshToken?: string,
  clientSecret?: string,
  accessToken?: string,
  expireTime?: string,
  nickname?: string,
  userAgent?: string,
}


init(config: Config){
  if (Util.isUnset(config)) {
    throw {
      name = "ParameterMissing",
      message = "'config' can not be unset"
    };
  }

  if (Util.empty(config.domainId)) {
    throw {
      name = "ParameterMissing",
      message = "'config.domainId' can not be empty"
    };
  }
  
  if (!Util.empty(config.accessToken) || !Util.empty(config.refreshToken)) {
    var accessConfig = new AccessTokenCredential.Config{
      accessToken =  config.accessToken,
      endpoint = config.endpoint,
      domainId =  config.domainId,
      clientId = config.clientId,
      refreshToken = config.refreshToken,
      clientSecret =  config.clientSecret,
      expireTime = config.expireTime,
    };
    @accessTokenCredential = new AccessTokenCredential(accessConfig);
  }

  if (!Util.empty(config.accessKeyId)) {
    if (Util.empty(config.type)) {
      config.type = 'access_key';
    }
    var credentialConfig = new Credential.Config{
      accessKeyId =  config.accessKeyId,
      type = config.type,
      accessKeySecret =  config.accessKeySecret,
      securityToken = config.securityToken,
    };
    @credential = new Credential(credentialConfig);
  }
  @endpoint = config.endpoint;
  @region = config.region;
  @protocol = config.protocol;
  @domainId = config.domainId;
  @userAgent = config.userAgent;
  @nickname = config.nickname;
  }

model CreateDomainRequestModel {
  headers?: map[string]string(description='headers', name='headers'),
  body: CreateDomainRequest(description='body', name='body'),
}

model CreateDomainModel {
  headers?: map[string]string(description='headers', name='headers'),
  body: CreateDomainResponse(description='body', name='body'),
}

/**
 * 创建 Domain
 * @tags domain
 * @error InvalidParameter The input parameter {parameter_name} is not valid.
 * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
 * @error InternalError The request has been failed due to some unknown error.
 * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
 */
api createDomain(request: CreateDomainRequestModel, runtime: RuntimeOptions): CreateDomainModel  {
  var accesskeyId = getAccessKeyId();
  var accessKeySecret = getAccessKeySecret();
  var securityToken = getSecurityToken();
  var accessToken = getAccessToken();
  __request.protocol = Util.defaultString(@protocol, 'https');
  __request.method = 'POST';
  __request.pathname = getPathname(@nickname, `/v2/domain/create`);
  __request.headers = {
    user-agent = getUserAgent(),
    host = Util.defaultString(@endpoint, `${@region}.admin.alicloudccp.com`),
    content-type = 'application/json; charset=utf-8',
    ...request.headers
  };

  if (!Util.empty(accessToken)) {
    __request.headers.authorization = `Bearer ${accessToken}`;
  } else if (!Util.empty(accesskeyId) && !Util.empty(accessKeySecret)) {
    if (!Util.empty(securityToken)) {
      __request.headers.x-acs-security-token = securityToken;
    }
    __request.headers.date = Util.getDateUTCString();
    __request.headers.accept = 'application/json';
    __request.headers.x-acs-signature-method = 'HMAC-SHA1';
    __request.headers.x-acs-signature-version = '1.0';
    var stringToSign = ROAUtil.getStringToSign(__request);
    __request.headers.authorization = `acs ${accesskeyId}:${ROAUtil.getSignature(stringToSign, accessKeySecret)}`;
  }
  __request.body = Util.toJSONString(request.body);
} returns {
  var respMap : object = null;
  var obj : any = null;
  if (Util.equalNumber(__response.statusCode, 200)) {
    obj = Util.readAsJSON(__response.body);
    respMap = Util.assertAsMap(obj);
    return {
      body = respMap,
      headers =  __response.headers,
    };
  }

  if (!Util.empty(__response.headers.x-ca-error-message)) {
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      message = __response.headers.x-ca-error-message,
    };
  }
  obj = Util.readAsJSON(__response.body);
  respMap = Util.assertAsMap(obj);
  throw {
    data = {
      requestId = __response.headers.x-ca-request-id,
      statusCode = __response.statusCode,
      statusMessage = __response.statusMessage,
    },
    ...respMap,
  };
} runtime {
  timeouted = 'retry',
  readTimeout = runtime.readTimeout,
  connectTimeout = runtime.connectTimeout,
  localAddr = runtime.localAddr,
  httpProxy = runtime.httpProxy,
  httpsProxy = runtime.httpsProxy,
  noProxy = runtime.noProxy,
  maxIdleConns = runtime.maxIdleConns,
  socks5Proxy = runtime.socks5Proxy,
  socks5NetWork = runtime.socks5NetWork,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3),
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1),
  },
  ignoreSSL = runtime.ignoreSSL
}

model DeleteDomainRequestModel {
  headers?: map[string]string(description='headers', name='headers'),
  body: DeleteDomainRequest(description='body', name='body'),
}

model DeleteDomainModel {
  headers?: map[string]string(description='headers', name='headers'),
}

/**
 * 删除 Domain
 * @tags domain
 * @error InvalidParameter The input parameter {parameter_name} is not valid.
 * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
 * @error NotFound The resource {resource_name} cannot be found. Please check.
 * @error InternalError The request has been failed due to some unknown error.
 * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
 */
api deleteDomain(request: DeleteDomainRequestModel, runtime: RuntimeOptions): DeleteDomainModel  {
  var accesskeyId = getAccessKeyId();
  var accessKeySecret = getAccessKeySecret();
  var securityToken = getSecurityToken();
  var accessToken = getAccessToken();
  __request.protocol = Util.defaultString(@protocol, 'https');
  __request.method = 'POST';
  __request.pathname = getPathname(@nickname, `/v2/domain/delete`);
  __request.headers = {
    user-agent = getUserAgent(),
    host = Util.defaultString(@endpoint, `${@region}.admin.alicloudccp.com`),
    content-type = 'application/json; charset=utf-8',
    ...request.headers
  };

  if (!Util.empty(accessToken)) {
    __request.headers.authorization = `Bearer ${accessToken}`;
  } else if (!Util.empty(accesskeyId) && !Util.empty(accessKeySecret)) {
    if (!Util.empty(securityToken)) {
      __request.headers.x-acs-security-token = securityToken;
    }
    __request.headers.date = Util.getDateUTCString();
    __request.headers.accept = 'application/json';
    __request.headers.x-acs-signature-method = 'HMAC-SHA1';
    __request.headers.x-acs-signature-version = '1.0';
    var stringToSign = ROAUtil.getStringToSign(__request);
    __request.headers.authorization = `acs ${accesskeyId}:${ROAUtil.getSignature(stringToSign, accessKeySecret)}`;
  }
  __request.body = Util.toJSONString(request.body);
} returns {
  var respMap : object = null;
  var obj : any = null;
  if (Util.equalNumber(__response.statusCode, 204)) {
    return {
      headers =  __response.headers,
    };
  }

  if (!Util.empty(__response.headers.x-ca-error-message)) {
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      message = __response.headers.x-ca-error-message,
    };
  }
  obj = Util.readAsJSON(__response.body);
  respMap = Util.assertAsMap(obj);
  throw {
    data = {
      requestId = __response.headers.x-ca-request-id,
      statusCode = __response.statusCode,
      statusMessage = __response.statusMessage,
    },
    ...respMap,
  };
} runtime {
  timeouted = 'retry',
  readTimeout = runtime.readTimeout,
  connectTimeout = runtime.connectTimeout,
  localAddr = runtime.localAddr,
  httpProxy = runtime.httpProxy,
  httpsProxy = runtime.httpsProxy,
  noProxy = runtime.noProxy,
  maxIdleConns = runtime.maxIdleConns,
  socks5Proxy = runtime.socks5Proxy,
  socks5NetWork = runtime.socks5NetWork,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3),
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1),
  },
  ignoreSSL = runtime.ignoreSSL
}

model GetDomainRequestModel {
  headers?: map[string]string(description='headers', name='headers'),
  body: GetDomainRequest(description='body', name='body'),
}

model GetDomainModel {
  headers?: map[string]string(description='headers', name='headers'),
  body: GetDomainResponse(description='body', name='body'),
}

/**
 * 获取 Domain
 * @tags domain
 * @error InvalidParameter The input parameter {parameter_name} is not valid.
 * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
 * @error NotFound The resource {resource_name} cannot be found. Please check.
 * @error InternalError The request has been failed due to some unknown error.
 * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
 */
api getDomain(request: GetDomainRequestModel, runtime: RuntimeOptions): GetDomainModel  {
  var accesskeyId = getAccessKeyId();
  var accessKeySecret = getAccessKeySecret();
  var securityToken = getSecurityToken();
  var accessToken = getAccessToken();
  __request.protocol = Util.defaultString(@protocol, 'https');
  __request.method = 'POST';
  __request.pathname = getPathname(@nickname, `/v2/domain/get`);
  __request.headers = {
    user-agent = getUserAgent(),
    host = Util.defaultString(@endpoint, `${@region}.admin.alicloudccp.com`),
    content-type = 'application/json; charset=utf-8',
    ...request.headers
  };

  if (!Util.empty(accessToken)) {
    __request.headers.authorization = `Bearer ${accessToken}`;
  } else if (!Util.empty(accesskeyId) && !Util.empty(accessKeySecret)) {
    if (!Util.empty(securityToken)) {
      __request.headers.x-acs-security-token = securityToken;
    }
    __request.headers.date = Util.getDateUTCString();
    __request.headers.accept = 'application/json';
    __request.headers.x-acs-signature-method = 'HMAC-SHA1';
    __request.headers.x-acs-signature-version = '1.0';
    var stringToSign = ROAUtil.getStringToSign(__request);
    __request.headers.authorization = `acs ${accesskeyId}:${ROAUtil.getSignature(stringToSign, accessKeySecret)}`;
  }
  __request.body = Util.toJSONString(request.body);
} returns {
  var respMap : object = null;
  var obj : any = null;
  if (Util.equalNumber(__response.statusCode, 200)) {
    obj = Util.readAsJSON(__response.body);
    respMap = Util.assertAsMap(obj);
    return {
      body = respMap,
      headers =  __response.headers,
    };
  }

  if (!Util.empty(__response.headers.x-ca-error-message)) {
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      message = __response.headers.x-ca-error-message,
    };
  }
  obj = Util.readAsJSON(__response.body);
  respMap = Util.assertAsMap(obj);
  throw {
    data = {
      requestId = __response.headers.x-ca-request-id,
      statusCode = __response.statusCode,
      statusMessage = __response.statusMessage,
    },
    ...respMap,
  };
} runtime {
  timeouted = 'retry',
  readTimeout = runtime.readTimeout,
  connectTimeout = runtime.connectTimeout,
  localAddr = runtime.localAddr,
  httpProxy = runtime.httpProxy,
  httpsProxy = runtime.httpsProxy,
  noProxy = runtime.noProxy,
  maxIdleConns = runtime.maxIdleConns,
  socks5Proxy = runtime.socks5Proxy,
  socks5NetWork = runtime.socks5NetWork,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3),
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1),
  },
  ignoreSSL = runtime.ignoreSSL
}

model ListDomainsRequestModel {
  headers?: map[string]string(description='headers', name='headers'),
  body: ListDomainsRequest(description='body', name='body'),
}

model ListDomainModel {
  headers?: map[string]string(description='headers', name='headers'),
  body: ListDomainsResponse(description='body', name='body'),
}

/**
 * 列举 Domain
 * @tags domain
 * @error InvalidParameter The input parameter {parameter_name} is not valid.
 * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
 * @error InternalError The request has been failed due to some unknown error.
 * @error undefined undefined
 */
api listDomain(request: ListDomainsRequestModel, runtime: RuntimeOptions): ListDomainModel  {
  var accesskeyId = getAccessKeyId();
  var accessKeySecret = getAccessKeySecret();
  var securityToken = getSecurityToken();
  var accessToken = getAccessToken();
  __request.protocol = Util.defaultString(@protocol, 'https');
  __request.method = 'POST';
  __request.pathname = getPathname(@nickname, `/v2/domain/list`);
  __request.headers = {
    user-agent = getUserAgent(),
    host = Util.defaultString(@endpoint, `${@region}.admin.alicloudccp.com`),
    content-type = 'application/json; charset=utf-8',
    ...request.headers
  };

  if (!Util.empty(accessToken)) {
    __request.headers.authorization = `Bearer ${accessToken}`;
  } else if (!Util.empty(accesskeyId) && !Util.empty(accessKeySecret)) {
    if (!Util.empty(securityToken)) {
      __request.headers.x-acs-security-token = securityToken;
    }
    __request.headers.date = Util.getDateUTCString();
    __request.headers.accept = 'application/json';
    __request.headers.x-acs-signature-method = 'HMAC-SHA1';
    __request.headers.x-acs-signature-version = '1.0';
    var stringToSign = ROAUtil.getStringToSign(__request);
    __request.headers.authorization = `acs ${accesskeyId}:${ROAUtil.getSignature(stringToSign, accessKeySecret)}`;
  }
  __request.body = Util.toJSONString(request.body);
} returns {
  var respMap : object = null;
  var obj : any = null;
  if (Util.equalNumber(__response.statusCode, 200)) {
    obj = Util.readAsJSON(__response.body);
    respMap = Util.assertAsMap(obj);
    return {
      body = respMap,
      headers =  __response.headers,
    };
  }

  if (!Util.empty(__response.headers.x-ca-error-message)) {
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      message = __response.headers.x-ca-error-message,
    };
  }
  obj = Util.readAsJSON(__response.body);
  respMap = Util.assertAsMap(obj);
  throw {
    data = {
      requestId = __response.headers.x-ca-request-id,
      statusCode = __response.statusCode,
      statusMessage = __response.statusMessage,
    },
    ...respMap,
  };
} runtime {
  timeouted = 'retry',
  readTimeout = runtime.readTimeout,
  connectTimeout = runtime.connectTimeout,
  localAddr = runtime.localAddr,
  httpProxy = runtime.httpProxy,
  httpsProxy = runtime.httpsProxy,
  noProxy = runtime.noProxy,
  maxIdleConns = runtime.maxIdleConns,
  socks5Proxy = runtime.socks5Proxy,
  socks5NetWork = runtime.socks5NetWork,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3),
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1),
  },
  ignoreSSL = runtime.ignoreSSL
}

model UpdateDomainRequestModel {
  headers?: map[string]string(description='headers', name='headers'),
  body: UpdateDomainRequest(description='body', name='body'),
}

model UpdateDomainModel {
  headers?: map[string]string(description='headers', name='headers'),
  body: UpdateDomainResponse(description='body', name='body'),
}

/**
 * 更新 Domain
 * @tags domain
 * @error InvalidParameter The input parameter {parameter_name} is not valid.
 * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
 * @error NotFound The resource {resource_name} cannot be found. Please check.
 * @error InternalError The request has been failed due to some unknown error.
 * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
 */
api updateDomain(request: UpdateDomainRequestModel, runtime: RuntimeOptions): UpdateDomainModel  {
  var accesskeyId = getAccessKeyId();
  var accessKeySecret = getAccessKeySecret();
  var securityToken = getSecurityToken();
  var accessToken = getAccessToken();
  __request.protocol = Util.defaultString(@protocol, 'https');
  __request.method = 'POST';
  __request.pathname = getPathname(@nickname, `/v2/domain/update`);
  __request.headers = {
    user-agent = getUserAgent(),
    host = Util.defaultString(@endpoint, `${@region}.admin.alicloudccp.com`),
    content-type = 'application/json; charset=utf-8',
    ...request.headers
  };

  if (!Util.empty(accessToken)) {
    __request.headers.authorization = `Bearer ${accessToken}`;
  } else if (!Util.empty(accesskeyId) && !Util.empty(accessKeySecret)) {
    if (!Util.empty(securityToken)) {
      __request.headers.x-acs-security-token = securityToken;
    }
    __request.headers.date = Util.getDateUTCString();
    __request.headers.accept = 'application/json';
    __request.headers.x-acs-signature-method = 'HMAC-SHA1';
    __request.headers.x-acs-signature-version = '1.0';
    var stringToSign = ROAUtil.getStringToSign(__request);
    __request.headers.authorization = `acs ${accesskeyId}:${ROAUtil.getSignature(stringToSign, accessKeySecret)}`;
  }
  __request.body = Util.toJSONString(request.body);
} returns {
  var respMap : object = null;
  var obj : any = null;
  if (Util.equalNumber(__response.statusCode, 200)) {
    obj = Util.readAsJSON(__response.body);
    respMap = Util.assertAsMap(obj);
    return {
      body = respMap,
      headers =  __response.headers,
    };
  }

  if (!Util.empty(__response.headers.x-ca-error-message)) {
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      message = __response.headers.x-ca-error-message,
    };
  }
  obj = Util.readAsJSON(__response.body);
  respMap = Util.assertAsMap(obj);
  throw {
    data = {
      requestId = __response.headers.x-ca-request-id,
      statusCode = __response.statusCode,
      statusMessage = __response.statusMessage,
    },
    ...respMap,
  };
} runtime {
  timeouted = 'retry',
  readTimeout = runtime.readTimeout,
  connectTimeout = runtime.connectTimeout,
  localAddr = runtime.localAddr,
  httpProxy = runtime.httpProxy,
  httpsProxy = runtime.httpsProxy,
  noProxy = runtime.noProxy,
  maxIdleConns = runtime.maxIdleConns,
  socks5Proxy = runtime.socks5Proxy,
  socks5NetWork = runtime.socks5NetWork,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3),
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1),
  },
  ignoreSSL = runtime.ignoreSSL
}

/**
 * 
 */
model AddStoreRequest {
  basePath?: string(name='base_path', description='存储公共前缀', example='ccp-data'),
  bucket?: string(name='bucket', description='bucket名称', example='data-sz-bucket'),
  domainId: string(name='domain_id', description='domain ID', example='sz100'),
  endpoint: string(name='endpoint', description='存储访问地址', example='https://oss-cn-shenzhen.aliyuncs.com/'),
  ownership?: string(name='ownership', default='system', description='存储归属，system表示系统提供，custom表示使用自己的存储', enum='system, custom', example='system'),
  roleArn?: string(name='role_arn', description='访问Bucket的角色ARN', example='acs:oss:*:*:*'),
  type: string(name='type', description='存储类型，当前只支持oss', enum='oss', example='oss'),
}

/**
 * 
 */
model AddStoreResponse {
  accelerateEndpoint?: string(name='accelerate_endpoint', description='全球加速域名', example='https://oss-cn-shenzhen.aliyuncs.com/'),
  basePath?: string(name='base_path', description='存储公共前缀', example='ccp-data'),
  bucket: string(name='bucket', description='bucket名称', example='data-sz-bucket'),
  customizedEndpoint?: string(name='customized_endpoint', description='用户自定义绑定存储地址', example='https://oss-cn-shenzhen.aliyuncs.com/'),
  domainId: string(name='domain_id', description='domain ID', example='sz100'),
  endpoint: string(name='endpoint', description='存储访问地址', example='https://oss-cn-shenzhen.aliyuncs.com/'),
  internalEndpoint?: string(name='internal_endpoint', description='内网存储地址', example='https://oss-cn-shenzhen.aliyuncs.com/'),
  ownership: string(name='ownership', description='存储归属，system表示系统提供，custom表示使用自己的存储', enum='system, custom', example='system'),
  policy: string(name='policy', description='Policy授权,system类型store会将bucket权限授予当前云账号'),
  roleArn?: string(name='role_arn', description='访问Bucket的角色ARN', example='acs:oss:*:*:*'),
  storeId: string(name='store_id', description='store ID', example='cdjaksbwuiqbxuiassd'),
  type: string(name='type', description='存储类型，当前只支持oss', enum='oss', example='oss'),
}

/**
 * 
 */
model AppAccessStrategy {
  effect?: string(name='effect'),
  exceptAppIdList?: [ string ](name='except_app_id_list', items='{"type":"string"}'),
}

/**
 * 
 */
model AuthConfig {
  appId?: string(name='app_id'),
  appSecret?: string(name='app_secret'),
  callbackSecurity?: boolean(name='callback_security'),
  enable?: boolean(name='enable'),
  endpoint?: string(name='endpoint'),
  enterpriseId?: string(name='enterprise_id'),
}

/**
 * base domain response
 */
model BaseDomainResponse {
  authAlipayAppId?: string(name='auth_alipay_app_id', description='支付宝 App Id', example='abc'),
  authAlipayEnable?: boolean(name='auth_alipay_enable', description='是否开启了支付宝认证', example=true),
  authAlipayPrivateKey?: string(name='auth_alipay_private_key', description='支付宝 App Secret', example='abc'),
  authConfig?: object(name='auth_config', additionalProperties='{"$ref":"#/definitions/AuthConfig"}', description='登录相关信息', example='{}'),
  authDingdingAppId?: string(name='auth_dingding_app_id', description='钉钉 App Id', example='abc'),
  authDingdingAppSecret?: string(name='auth_dingding_app_secret', description='钉钉 App Secret', example='abc'),
  authDingdingEnable?: boolean(name='auth_dingding_enable', description='是否开启了钉钉认证', example=true),
  authEndpointEnable?: boolean(name='auth_endpoint_enable'),
  authRamAppId?: string(name='auth_ram_app_id', description='RAM App Id', example='abc'),
  authRamAppSecret?: string(name='auth_ram_app_secret', description='RAM App Secret', example='abc'),
  authRamEnable?: boolean(name='auth_ram_enable', description='是否开启了 RAM 认证', example=true),
  createdAt?: string(name='created_at', description='Domain 创建时间', example='"2019-08-31T12:58:31.137Z"'),
  dataHashName?: string(name='data_hash_name', description='数据 Hash 算法', example='sha1'),
  description?: string(name='description', description='Domain 描述', example='my test domain'),
  domainId?: string(name='domain_id', description='Domain ID', example='sz111'),
  domainName?: string(name='domain_name', description='Domain 描述', example='my test domain'),
  eventFilenameMatches?: string(name='event_filename_matches', description='事件通知 MNS 匹配文件名', example='abc'),
  eventMnsEndpoint?: string(name='event_mns_endpoint', description='事件通知 MNS Endpoint', example='http://abc.mns.cn-shenzhen.aliyuncs.com'),
  eventMnsTopic?: string(name='event_mns_topic', description='事件通知 MNS Topic', example='abc'),
  eventNames?: [ string ](name='event_names', description='事件名列表', example='abc', items='{"type":"string"}'),
  eventRoleArn?: string(name='event_role_arn', description='事件通知 Role Arn'),
  initDriveEnable?: boolean(name='init_drive_enable', description='是否开启了自动初始化 Drive', example=true),
  initDriveSize?: long(name='init_drive_size', description='自动初始化 Drive 大小', example=1024, format='int64'),
  initDriveStoreId?: string(name='init_drive_store_id', description='自动初始化 Drive 所用 Store ID', example='1'),
  pathType?: string(name='path_type', description='Domain 类型', example='CCPPath'),
  publishedAppAccessStrategy?: AppAccessStrategy(name='published_app_access_strategy'),
  sharable?: boolean(name='sharable', description='是否开启了分享', example=true),
  storeLevel?: string(name='store_level', description='存储级别', example='Standard'),
  storeRegionList?: [ string ](name='store_region_list', description='存储 Region 列表', example='cn-hangzhou', items='{"type":"string"}'),
  updatedAt?: string(name='updated_at', description='Domain 更新时间', example='"2019-08-31T12:58:31.137Z"'),
}

/**
 * 
 */
model Captcha {
  captcha: string(name='captcha', description='图片验证码，base64格式', example='iVBORw0KGgoAAAANSUhEUgAAAFAAAAAaCAIAAACvsEzwAAABRElEQVR42t3YsQ4CIQwA0CZ+i36Bg5uTo1/gqquDTvf1JwkJqRR7vZYCJ2HClOMBVw5h/i7P9yvU+X8LFFsju728wRNhcQR+gyj27G2GtQGHxy5USaN6PV1n2Qt8Ou6ZKllPJ/MQ4PN0CzXrs9i4jS2dIelKMuBse18vd1zdweHZdnC2V3kwDsm0OnYHMDVLtnQICbZ0XuIpqAamaaMjmGbvOAV0Fmqew7XAmXlV0kqButcYhDs5PqYiGA9dDm6atCK7bpbGx5Jknxszlj5pYR5t8QMX8b5gLMSVCZGfw4svdtHsDqZmPooHJxte5NTCnx3twKvKIhgLcaXrSbP0iGBhIK/99aXlnrQst1/7BajDt7Txxl/rrqvuBOaGJY3Szt4GOBuoka2LhQYw/ic1eyww/5eV95x229IDmqHlS1vdrOjkA5iK2BYUhM2zAAAAAElFTkSuQmCC'),
  captchaFormat: string(name='captcha_format', description='图片格式', example='png'),
  captchaId: string(name='captcha_id', description='图片验证码ID', example='f4690fc255e2fb24c10ede079d3802b4cClRimRh67Q'),
}

/**
 * 
 */
model CorsRule {
  allowedHeader?: [ string ](name='allowed_header', description='AllowedHeader', example='h*', items='{"type":"string"}'),
  allowedMethod?: [ string ](name='allowed_method', description='AllowedMethod', example='PUT, GET', items='{"type":"string"}'),
  allowedOrigin?: [ string ](name='allowed_origin', description='AllowedOrigin', example='*', items='{"type":"string"}'),
  exposeHeader?: [ string ](name='expose_header', description='ExposeHeader', example='ETag', items='{"type":"string"}'),
  maxAgeSeconds?: long(name='max_age_seconds', description='MaxAgeSeconds', example=0, format='int64'),
}

/**
 * 
 */
model CreateAppRequest {
  appName: string(name='app_name', description='App名称', example='图片分享应用', maxLength=128, minLength=1),
  description?: string(name='description', description='App描述', example='测试专用', maxLength=128, minLength=0),
  isThirdParty?: boolean(name='is_third_party', default=false, description='是否是domain私有App', example=false),
  logo: string(name='logo', description='App图标', example='https://app.com/logo.jpg'),
  redirectUri?: string(name='redirect_uri', description='App回调地址', example='https://app.com/callback'),
  scope: [ string ](name='scope', description='App权限列表', enum='FILE.ALL, SHARE.ALL, STORAGEFILE.ALL, STORAGE.ALL, DRIVE.ALL, USER.ALL', items='{"type":"string"}'),
  type: string(name='type', default='WebServer', description='App类型', enum='WebServer, WebBrowser, Native, JWT', example='WebServer'),
}

/**
 * create domain request
 */
model CreateDomainRequest {
  authAlipayAppId?: string(name='auth_alipay_app_id', description='支付宝 App Id', example='abc'),
  authAlipayEnbale?: boolean(name='auth_alipay_enbale', description='启用支付宝认证', example=true),
  authAlipayPrivateKey?: string(name='auth_alipay_private_key', description='支付宝 App Secret', example='abc'),
  authConfig?: object(name='auth_config', additionalProperties='{"$ref":"#/definitions/AuthConfig"}', description='登录相关信息', example='{}'),
  authDingdingAppId?: string(name='auth_dingding_app_id', description='钉钉 App Id', example='abc'),
  authDingdingAppSecret?: string(name='auth_dingding_app_secret', description='钉钉 App Secret', example='abc'),
  authDingdingEnable?: boolean(name='auth_dingding_enable', description='启用钉钉认证', example=true),
  authEndpointEnable?: boolean(name='auth_endpoint_enable'),
  authRamAppId?: string(name='auth_ram_app_id', description='RAM App Id', example='abc'),
  authRamAppSecret?: string(name='auth_ram_app_secret', description='RAM App Secret', example='abc'),
  authRamEnable?: boolean(name='auth_ram_enable', description='启用 RAM 认证', example=true),
  dataHashName?: string(name='data_hash_name', description='数据 Hash 算法', example='sha1'),
  description?: string(name='description', description='Domain 描述', example='my test domain'),
  domainName: string(name='domain_name', description='Domain 名称', example='test_domain'),
  eventFilenameMatches?: string(name='event_filename_matches', description='事件通知 MNS 匹配文件名', example='abc'),
  eventMnsEndpoint?: string(name='event_mns_endpoint', description='事件通知 MNS Endpoint', example='http://abc.mns.cn-shenzhen.aliyuncs.com'),
  eventMnsTopic?: string(name='event_mns_topic', description='事件通知 MNS Topic', example='abc'),
  eventNames?: [ string ](name='event_names', description='事件名列表', example='abc', items='{"type":"string"}'),
  eventRoleArn?: string(name='event_role_arn', description='事件通知 Role Arn'),
  initDriveEnable?: boolean(name='init_drive_enable', description='开启自动初始化 Drive', example=true),
  initDriveSize?: long(name='init_drive_size', description='自动初始化 Drive 大小', example=1024, format='int64'),
  pathType: string(name='path_type', description='Domain 类型', example='CCPPath'),
  publishedAppAccessStrategy?: AppAccessStrategy(name='published_app_access_strategy'),
  sharable?: boolean(name='sharable', description='开启分享', example=true),
  storeLevel?: string(name='store_level', description='存储级别', example='Standard'),
  storeRegionList: [ string ](name='store_region_list', description='存储 Region 列表', example='cn-hangzhou', items='{"type":"string"}'),
}

/**
 * create domain response
 */
model CreateDomainResponse {
  authAlipayAppId?: string(name='auth_alipay_app_id', description='支付宝 App Id', example='abc'),
  authAlipayEnable?: boolean(name='auth_alipay_enable', description='是否开启了支付宝认证', example=true),
  authAlipayPrivateKey?: string(name='auth_alipay_private_key', description='支付宝 App Secret', example='abc'),
  authConfig?: object(name='auth_config', additionalProperties='{"$ref":"#/definitions/AuthConfig"}', description='登录相关信息', example='{}'),
  authDingdingAppId?: string(name='auth_dingding_app_id', description='钉钉 App Id', example='abc'),
  authDingdingAppSecret?: string(name='auth_dingding_app_secret', description='钉钉 App Secret', example='abc'),
  authDingdingEnable?: boolean(name='auth_dingding_enable', description='是否开启了钉钉认证', example=true),
  authEndpointEnable?: boolean(name='auth_endpoint_enable'),
  authRamAppId?: string(name='auth_ram_app_id', description='RAM App Id', example='abc'),
  authRamAppSecret?: string(name='auth_ram_app_secret', description='RAM App Secret', example='abc'),
  authRamEnable?: boolean(name='auth_ram_enable', description='是否开启了 RAM 认证', example=true),
  createdAt?: string(name='created_at', description='Domain 创建时间', example='"2019-08-31T12:58:31.137Z"'),
  dataHashName?: string(name='data_hash_name', description='数据 Hash 算法', example='sha1'),
  description?: string(name='description', description='Domain 描述', example='my test domain'),
  domainId?: string(name='domain_id', description='Domain ID', example='sz111'),
  domainName?: string(name='domain_name', description='Domain 描述', example='my test domain'),
  eventFilenameMatches?: string(name='event_filename_matches', description='事件通知 MNS 匹配文件名', example='abc'),
  eventMnsEndpoint?: string(name='event_mns_endpoint', description='事件通知 MNS Endpoint', example='http://abc.mns.cn-shenzhen.aliyuncs.com'),
  eventMnsTopic?: string(name='event_mns_topic', description='事件通知 MNS Topic', example='abc'),
  eventNames?: [ string ](name='event_names', description='事件名列表', example='abc', items='{"type":"string"}'),
  eventRoleArn?: string(name='event_role_arn', description='事件通知 Role Arn'),
  initDriveEnable?: boolean(name='init_drive_enable', description='是否开启了自动初始化 Drive', example=true),
  initDriveSize?: long(name='init_drive_size', description='自动初始化 Drive 大小', example=1024, format='int64'),
  initDriveStoreId?: string(name='init_drive_store_id', description='自动初始化 Drive 所用 Store ID', example='1'),
  pathType?: string(name='path_type', description='Domain 类型', example='CCPPath'),
  publishedAppAccessStrategy?: AppAccessStrategy(name='published_app_access_strategy'),
  sharable?: boolean(name='sharable', description='是否开启了分享', example=true),
  storeLevel?: string(name='store_level', description='存储级别', example='Standard'),
  storeRegionList?: [ string ](name='store_region_list', description='存储 Region 列表', example='cn-hangzhou', items='{"type":"string"}'),
  updatedAt?: string(name='updated_at', description='Domain 更新时间', example='"2019-08-31T12:58:31.137Z"'),
}

/**
 * 
 */
model DeleteAppRequest {
  appId: string(name='app_id', description='App ID', example='CNMrhxwPJHAReExa'),
}

/**
 * delete domain request
 */
model DeleteDomainRequest {
  domainId: string(name='domain_id', description='Domain ID', example='sz111'),
}

/**
 * 
 */
model GetAppPublicKeyRequest {
  appId: string(name='app_id', description='App ID', example='CNMrhxwPJHAReExa'),
}

/**
 * 
 */
model GetAppPublicKeyResponse {
  appId: string(name='app_id', description='App ID', example='cksaljkfiwasdn'),
  publicKey: string(name='public_key', description='RSA加密算法的公钥, PEM格式', example='-----BEGIN RSA PUBLIC KEY-----****-----END RSA PUBLIC KEY-----'),
}

/**
 * 
 */
model GetAppRequest {
  appId: string(name='app_id', description='App ID', example='CNMrhxwPJHAReExa'),
}

/**
 * 
 */
model GetAppResponse {
  aliOwnerId: string(name='ali_owner_id', description='App 拥有者', example='172***430'),
  appId: string(name='app_id', description='App ID', example='cksaljkfiwasdn'),
  appName: string(name='app_name', description='App名称', example='图片分享应用', maxLength=128, minLength=1, pattern='[0-9a-zA-Z]+'),
  appSecret: string(name='app_secret', description='App 秘钥', example='sax***Js9'),
  createdAt: string(name='created_at', description='App 创建时间', example='"2019-08-31T12:58:31.137Z"'),
  description: string(name='description', description='App描述', example='测试专用', maxLength=128, minLength=0),
  logo: string(name='logo', description='App图标', example='https://app.com/logo.jpg'),
  provider: string(name='provider', description='App 提供方', example='Alibaba Inc.'),
  redirectUri: string(name='redirect_uri', description='App回调地址', example='https://app.com/callback'),
  scope: [ string ](name='scope', description='App权限列表', enum='FILE.ALL, SHARE.ALL, STORAGEFILE.ALL, STORAGE.ALL, DRIVE.ALL, USER.ALL', items='{"type":"string"}'),
  screenshots: [ string ](name='screenshots', description='App 屏幕截图', example='http://app.com/screenshot_1.jpg', items='{"type":"string"}'),
  stage: string(name='stage', default='UnPublished,Pending,Published', description='App 当前阶段', example='UnPublished'),
  type: string(name='type', default='WebServer', description='App类型', enum='WebServer, WebBrowser, Native', example='WebServer'),
  updatedAt: string(name='updated_at', description='App 修改时间', example='"2019-08-31T12:58:31.137Z"'),
}

/**
 * 
 */
model GetCorsRuleListRequest {
  domainId: string(name='domain_id', description='domain ID', example='sz100'),
}

/**
 * get domain request
 */
model GetDomainRequest {
  domainId: string(name='domain_id', description='Domain ID', example='sz111'),
}

/**
 * get domain response
 */
model GetDomainResponse {
  authAlipayAppId?: string(name='auth_alipay_app_id', description='支付宝 App Id', example='abc'),
  authAlipayEnable?: boolean(name='auth_alipay_enable', description='是否开启了支付宝认证', example=true),
  authAlipayPrivateKey?: string(name='auth_alipay_private_key', description='支付宝 App Secret', example='abc'),
  authConfig?: object(name='auth_config', additionalProperties='{"$ref":"#/definitions/AuthConfig"}', description='登录相关信息', example='{}'),
  authDingdingAppId?: string(name='auth_dingding_app_id', description='钉钉 App Id', example='abc'),
  authDingdingAppSecret?: string(name='auth_dingding_app_secret', description='钉钉 App Secret', example='abc'),
  authDingdingEnable?: boolean(name='auth_dingding_enable', description='是否开启了钉钉认证', example=true),
  authEndpointEnable?: boolean(name='auth_endpoint_enable'),
  authRamAppId?: string(name='auth_ram_app_id', description='RAM App Id', example='abc'),
  authRamAppSecret?: string(name='auth_ram_app_secret', description='RAM App Secret', example='abc'),
  authRamEnable?: boolean(name='auth_ram_enable', description='是否开启了 RAM 认证', example=true),
  createdAt?: string(name='created_at', description='Domain 创建时间', example='"2019-08-31T12:58:31.137Z"'),
  dataHashName?: string(name='data_hash_name', description='数据 Hash 算法', example='sha1'),
  description?: string(name='description', description='Domain 描述', example='my test domain'),
  domainId?: string(name='domain_id', description='Domain ID', example='sz111'),
  domainName?: string(name='domain_name', description='Domain 描述', example='my test domain'),
  eventFilenameMatches?: string(name='event_filename_matches', description='事件通知 MNS 匹配文件名', example='abc'),
  eventMnsEndpoint?: string(name='event_mns_endpoint', description='事件通知 MNS Endpoint', example='http://abc.mns.cn-shenzhen.aliyuncs.com'),
  eventMnsTopic?: string(name='event_mns_topic', description='事件通知 MNS Topic', example='abc'),
  eventNames?: [ string ](name='event_names', description='事件名列表', example='abc', items='{"type":"string"}'),
  eventRoleArn?: string(name='event_role_arn', description='事件通知 Role Arn'),
  initDriveEnable?: boolean(name='init_drive_enable', description='是否开启了自动初始化 Drive', example=true),
  initDriveSize?: long(name='init_drive_size', description='自动初始化 Drive 大小', example=1024, format='int64'),
  initDriveStoreId?: string(name='init_drive_store_id', description='自动初始化 Drive 所用 Store ID', example='1'),
  pathType?: string(name='path_type', description='Domain 类型', example='CCPPath'),
  publishedAppAccessStrategy?: AppAccessStrategy(name='published_app_access_strategy'),
  sharable?: boolean(name='sharable', description='是否开启了分享', example=true),
  storeLevel?: string(name='store_level', description='存储级别', example='Standard'),
  storeRegionList?: [ string ](name='store_region_list', description='存储 Region 列表', example='cn-hangzhou', items='{"type":"string"}'),
  updatedAt?: string(name='updated_at', description='Domain 更新时间', example='"2019-08-31T12:58:31.137Z"'),
}

/**
 * 
 */
model ListAppsRequest {
  limit?: integer(name='limit', default=50, description='返回结果数据', example=100, format='int32', maximum=100, minimum=1),
  marker?: string(name='marker', description='下次查询游标', example='ncsajnsalsa='),
}

/**
 * 
 */
model ListAppsResponse {
  items: [ GetAppResponse ](name='items', description='App 列表', example='', items='{"$ref":"#/definitions/GetAppResponse"}'),
  nextMarker?: string(name='next_marker', description='App 分批查询游标', example='ncsajnsalsa='),
}

/**
 * list domain cors response
 */
model ListDomainCORSRuleResponse {
  corsRuleList?: [ CorsRule ](name='cors_rule_list', description='cors rule 列表', items='{"$ref":"#/definitions/CorsRule"}'),
  domainId?: string(name='domain_id', description='Domain ID', example='sz111'),
}

/**
 * list domain request
 */
model ListDomainsRequest {
  limit?: integer(name='limit', description='分页大小', example=100, format='int32', maximum=100, minimum=1),
  marker?: string(name='marker', description='查询游标', example='abcd'),
}

/**
 * list domain response
 */
model ListDomainsResponse {
  items?: [ BaseDomainResponse ](name='items', description='domain 列表', example='', items='{"$ref":"#/definitions/BaseDomainResponse"}'),
  nextMarker?: string(name='next_marker', description='下次分页查询游标', example='NWQ1YmI4MjA0ZGU1ZWNjYzAzODM0ZDVkODlkMWJiMzcyNzM1NTU4OA'),
}

/**
 * 
 */
model ListStoresRequest {
  domainId: string(name='domain_id', description='domain ID', example='sz100'),
}

/**
 * 
 */
model ListStoresResponse {
  items: [ Store ](name='items', description='Store 列表', example='', items='{"$ref":"#/definitions/Store"}'),
}

/**
 * 
 */
model RemoveStoreRequest {
  domainId: string(name='domain_id', description='domain ID', example='sz100'),
  storeId: string(name='store_id', description='store ID', example='cdjaksbwuiqbxuiassd'),
}

/**
 * 
 */
model SetAppPublicKeyRequest {
  appId: string(name='app_id', description='App ID', example='CNMrhxwPJHAReExa'),
  publicKey: string(name='public_key', description='RSA加密算法的公钥, PEM格式', example='-----BEGIN RSA PUBLIC KEY-----****-----END RSA PUBLIC KEY-----'),
}

/**
 * list cors rule request
 */
model SetCorsRuleListRequest {
  corsRuleList: [ CorsRule ](name='cors_rule_list', description='cors rule list', items='{"$ref":"#/definitions/CorsRule"}'),
  domainId: string(name='domain_id', description='domain ID', example='sz100'),
}

/**
 * 
 */
model Store {
  accelerateEndpoint?: string(name='accelerate_endpoint', description='全球加速域名', example='https://oss-cn-shenzhen.aliyuncs.com/'),
  basePath?: string(name='base_path', description='存储公共前缀', example='ccp-data'),
  bucket: string(name='bucket', description='bucket名称', example='data-sz-bucket'),
  customizedEndpoint?: string(name='customized_endpoint', description='用户自定义绑定存储地址', example='https://oss-cn-shenzhen.aliyuncs.com/'),
  endpoint: string(name='endpoint', description='存储访问地址', example='https://oss-cn-shenzhen.aliyuncs.com/'),
  internalEndpoint?: string(name='internal_endpoint', description='内网存储地址', example='https://oss-cn-shenzhen.aliyuncs.com/'),
  ownership: string(name='ownership', description='存储归属，system表示系统提供，custom表示使用自己的存储', enum='system, custom', example='system'),
  policy: string(name='policy', description='Policy授权,system类型store会将bucket权限授予当前云账号'),
  roleArn?: string(name='role_arn', description='访问Bucket的角色ARN', example='acs:oss:*:*:*'),
  storeId: string(name='store_id', description='store ID', example='cdjaksbwuiqbxuiassd'),
  type: string(name='type', description='存储类型，当前只支持oss', enum='oss', example='oss'),
}

/**
 * 
 */
model UpdateAppRequest {
  appId: string(name='app_id', description='App ID', example='CNMrhxwPJHAReExa'),
  appName: string(name='app_name', description='App名称', example='图片分享应用', maxLength=128, minLength=1),
  description?: string(name='description', description='App描述', example='测试专用', maxLength=128, minLength=0),
  logo: string(name='logo', description='App图标', example='https://app.com/logo.jpg'),
  redirectUri: string(name='redirect_uri', description='App回调地址', example='https://app.com/callback'),
  scope: [ string ](name='scope', description='App权限列表', enum='FILE.ALL, SHARE.ALL, STORAGEFILE.ALL, STORAGE.ALL, DRIVE.ALL, USER.ALL', items='{"type":"string"}'),
  type: string(name='type', default='WebServer', description='App类型', enum='WebServer, WebBrowser, Native, JWT', example='WebServer'),
}

/**
 * update domain request
 */
model UpdateDomainRequest {
  authAlipayAppId?: string(name='auth_alipay_app_id', description='支付宝 App Id', example='abc'),
  authAlipayEnbale?: boolean(name='auth_alipay_enbale', description='启用支付宝认证', example=true),
  authAlipayPrivateKey?: string(name='auth_alipay_private_key', description='支付宝 App Secret', example='abc'),
  authConfig?: object(name='auth_config', additionalProperties='{"$ref":"#/definitions/AuthConfig"}'),
  authDingdingAppId?: string(name='auth_dingding_app_id', description='钉钉 App Id', example='abc'),
  authDingdingAppSecret?: string(name='auth_dingding_app_secret', description='钉钉 App Secret', example='abc'),
  authDingdingEnable?: boolean(name='auth_dingding_enable', description='启用钉钉认证', example=true),
  authEndpointEnable?: boolean(name='auth_endpoint_enable'),
  authRamAppId?: string(name='auth_ram_app_id', description='RAM App Id', example='abc'),
  authRamAppSecret?: string(name='auth_ram_app_secret', description='RAM App Secret', example='abc'),
  authRamEnable?: boolean(name='auth_ram_enable', description='启用 RAM 认证', example=true),
  dataHashName?: string(name='data_hash_name', description='数据 Hash 算法', example='sha1'),
  description?: string(name='description', description='Domain 描述', example='my test domain'),
  domainId: string(name='domain_id', description='Domain ID', example='sz111'),
  domainName?: string(name='domain_name', description='Domain 名称', example='test_domain'),
  eventFilenameMatches?: string(name='event_filename_matches', description='事件通知 MNS 匹配文件名', example='abc'),
  eventMnsEndpoint?: string(name='event_mns_endpoint', description='事件通知 MNS Endpoint', example='http://abc.mns.cn-shenzhen.aliyuncs.com'),
  eventMnsTopic?: string(name='event_mns_topic', description='事件通知 MNS Topic', example='abc'),
  eventNames?: [ string ](name='event_names', description='事件名列表', example='abc', items='{"type":"string"}'),
  eventRoleArn?: string(name='event_role_arn', description='事件通知 Role Arn'),
  initDriveEnable?: boolean(name='init_drive_enable', description='开启自动初始化 Drive', example=true),
  initDriveSize?: long(name='init_drive_size', description='自动初始化 Drive 大小', example=1024, format='int64'),
  initDriveStoreId?: string(name='init_drive_store_id', description='自动初始化 Drive 使用 Store ID', example='1'),
  publishedAppAccessStrategy?: AppAccessStrategy(name='published_app_access_strategy'),
  sharable?: boolean(name='sharable', description='开启分享', example=true),
}

/**
 * create domain response
 */
model UpdateDomainResponse {
  authAlipayAppId?: string(name='auth_alipay_app_id', description='支付宝 App Id', example='abc'),
  authAlipayEnable?: boolean(name='auth_alipay_enable', description='是否开启了支付宝认证', example=true),
  authAlipayPrivateKey?: string(name='auth_alipay_private_key', description='支付宝 App Secret', example='abc'),
  authConfig?: object(name='auth_config', additionalProperties='{"$ref":"#/definitions/AuthConfig"}', description='登录相关信息', example='{}'),
  authDingdingAppId?: string(name='auth_dingding_app_id', description='钉钉 App Id', example='abc'),
  authDingdingAppSecret?: string(name='auth_dingding_app_secret', description='钉钉 App Secret', example='abc'),
  authDingdingEnable?: boolean(name='auth_dingding_enable', description='是否开启了钉钉认证', example=true),
  authEndpointEnable?: boolean(name='auth_endpoint_enable'),
  authRamAppId?: string(name='auth_ram_app_id', description='RAM App Id', example='abc'),
  authRamAppSecret?: string(name='auth_ram_app_secret', description='RAM App Secret', example='abc'),
  authRamEnable?: boolean(name='auth_ram_enable', description='是否开启了 RAM 认证', example=true),
  createdAt?: string(name='created_at', description='Domain 创建时间', example='"2019-08-31T12:58:31.137Z"'),
  dataHashName?: string(name='data_hash_name', description='数据 Hash 算法', example='sha1'),
  description?: string(name='description', description='Domain 描述', example='my test domain'),
  domainId?: string(name='domain_id', description='Domain ID', example='sz111'),
  domainName?: string(name='domain_name', description='Domain 描述', example='my test domain'),
  eventFilenameMatches?: string(name='event_filename_matches', description='事件通知 MNS 匹配文件名', example='abc'),
  eventMnsEndpoint?: string(name='event_mns_endpoint', description='事件通知 MNS Endpoint', example='http://abc.mns.cn-shenzhen.aliyuncs.com'),
  eventMnsTopic?: string(name='event_mns_topic', description='事件通知 MNS Topic', example='abc'),
  eventNames?: [ string ](name='event_names', description='事件名列表', example='abc', items='{"type":"string"}'),
  eventRoleArn?: string(name='event_role_arn', description='事件通知 Role Arn'),
  initDriveEnable?: boolean(name='init_drive_enable', description='是否开启了自动初始化 Drive', example=true),
  initDriveSize?: long(name='init_drive_size', description='自动初始化 Drive 大小', example=1024, format='int64'),
  initDriveStoreId?: string(name='init_drive_store_id', description='自动初始化 Drive 所用 Store ID', example='1'),
  pathType?: string(name='path_type', description='Domain 类型', example='CCPPath'),
  publishedAppAccessStrategy?: AppAccessStrategy(name='published_app_access_strategy'),
  sharable?: boolean(name='sharable', description='是否开启了分享', example=true),
  storeLevel?: string(name='store_level', description='存储级别', example='Standard'),
  storeRegionList?: [ string ](name='store_region_list', description='存储 Region 列表', example='cn-hangzhou', items='{"type":"string"}'),
  updatedAt?: string(name='updated_at', description='Domain 更新时间', example='"2019-08-31T12:58:31.137Z"'),
}

/**
 * 
 */
model UserAuthentication {
  AuthenticationType: string(name='AuthenticationType', description='认证类型', example='mobile'),
  CreatedAt: long(name='CreatedAt', description='创建时间', example=1556163159820, format='int64'),
  Detail: string(name='Detail', description='详情', example='{name:abc}'),
  DomainID: string(name='DomainID', description='Domain ID', example='5000'),
  Identity: string(name='Identity', description='唯一身份标识', example='15208345000'),
  LastLoginTime: long(name='LastLoginTime', description='最后登录时间', example=1556163159820, format='int64'),
  Status: string(name='Status', description='状态', example='normal'),
  UserID: string(name='UserID', description='用户ID', example='00016a587b62b50003deea299a4f5b50'),
  extra?: string(name='extra', description='额外的信息，比如type为mobile时，此字段为国家编号，不填默认86', example='1'),
}

function getPathname(nickname: string, path: string): string {
  if (Util.empty(nickname)) {
    return path;
  }
  return `/${nickname}${path}`;
}

async function setExpireTime(expireTime: string): void{
  if (Util.isUnset(@accessTokenCredential)) {
    return;
  }
  @accessTokenCredential.setExpireTime(expireTime);
}

function getExpireTime(): string{
  if (Util.isUnset(@accessTokenCredential)) {
    return '';
  }
  var expireTime = @accessTokenCredential.getExpireTime();
  return expireTime;
}

function setUserAgent(userAgent: string): void {
  @userAgent = userAgent;
}

function appendUserAgent(userAgent: string): void {
  @userAgent = `${@userAgent} ${userAgent}`;
}

function getUserAgent(): string {
  var userAgent =  Util.getUserAgent(@userAgent);
  return userAgent;
}

function setRefreshToken(token: string): void{
  if (Util.isUnset(@accessTokenCredential)) {
    return;
  }
  @accessTokenCredential.setRefreshToken(token);
}

function getRefreshToken(): string{
  if (Util.isUnset(@accessTokenCredential)) {
    return '';
  }
  var token = @accessTokenCredential.getRefreshToken();
  return token;
}

function setAccessToken(token: string): void{
  if (Util.isUnset(@accessTokenCredential)) {
    return;
  }
  @accessTokenCredential.setAccessToken(token);
}

async function getAccessToken(): string{
  if (Util.isUnset(@accessTokenCredential)) {
    return '';
  }
  var token = @accessTokenCredential.getAccessToken();
  return token;
}

async function getAccessKeyId(): string{
  if (Util.isUnset(@credential)) {
    return '';
  }
  var accessKeyId = @credential.getAccessKeyId();
  return accessKeyId;
}

async function getAccessKeySecret(): string{
  if (Util.isUnset(@credential)) {
    return '';
  }
  var secret = @credential.getAccessKeySecret();
  return secret;
}

async function getSecurityToken(): string{
  if (Util.isUnset(@credential)) {
    return '';
  }
  var token = @credential.getSecurityToken();
  return token;
}


