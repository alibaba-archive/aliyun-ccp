/**
 *
 */
module Client {

  type @getHost = (string, string): string
  type @getProtocol = (string, string): string
  type @isStatusCode = ($Response, number): boolean
  type @readAsJSON = async ($Response): object
  type @toJSONString = (any): string
  type @toQuery = (any): map[string]string
  type @notEmpty = (string): boolean
  type @getRFC2616Date = (): string
  type @getSignature = ($Request): string
  type @default = (string, string): string
  type @defaultNumber = (number, number): number
  type @getAccessToken = async (): string
  type @getAccessKeyId = async (): string
  type @getAccessKeySecret = async (): string

  type @domainId = string
  type @endpoint = string
  type @protocol = string

  model RuntimeOptions {
    autoretry?: boolean(description='whether to try again', name='autoretry'),
    ignoreSSL?: boolean(description='ignore SSL validation', name='ignoreSSL'),
    maxAttempts?: number(description='maximum number of retries', name='maxAttempts'),
    backoffPolicy?: string(description='backoff policy', name='backoffPolicy'),
    backoffPeriod?: number(description='backoff period', name='backoffPeriod'),
    readTimeout?: number(description='read timeout', name='readTimeout'),
    connectTimeout?: number(description='connect timeout', name='connectTimeout'),
    httpProxy?: string(description='http proxy url', name='httpProxy'),
    httpsProxy?: string(description='https Proxy url', name='httpsProxy'),
    noProxy?: string(description='agent blacklist', name='noProxy'),
    maxIdleConns?: number(description='maximum number of connections', name='maxIdleConns'),
    localAddr?: string(description='local addr', name='localAddr'),
    socks5Proxy?: string(description='SOCKS5 proxy', name='socks5Proxy'),
    socks5NetWork?: string(description='SOCKS5 netWork', name='socks5NetWork'),
  }

  model Config {
    endpoint?: string,
    domainId: string,
    protocol?: string,
    credentialType?: string,
    securityToken?: string,
    accessKeyId?: string,
    accessKeySecret?: string,
    clientId?: string,
    refreshToken?: string,
    clientSecret?: string,
    accessToken?: string,
    expireTime?: string,
  }

  init(config: Config);

  /**
   * 
   */
  model AccountAccessTokenResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    accessToken: string(name='access_token', description='用于调用业务接口的accessToken', example='cnskjajkahwdhwialsnd'),
    avatar?: string(name='avatar', description='当前用户头像', example='cherry'),
    defaultDriveId?: string(name='default_drive_id', description='Default Drive ID', example='100'),
    existLink?: [ LinkInfo ](name='exist_link', description='当前用户已存在的登录方式', example='', items='{"$ref":"#/definitions/LinkInfo"}'),
    expireTime?: string(name='expire_time', description='accessToken过期时间，ISO时间', example='2019-09-01T06:57:48.813Z'),
    expiresIn?: long(name='expires_in', description='accessToken过期时间，单位秒', example=3600, format='int64'),
    needLink: boolean(name='need_link', description='是否需要绑定', example=false),
    nickName?: string(name='nick_name', description='当前用户昵称', example='cherry'),
    refreshToken?: string(name='refresh_token', description='用于刷新accessToken', example='cnskjajkahwdhwialsnd'),
    role?: string(name='role', description='当前用户角色', example='user'),
    state?: string(name='state', description='临时权限，用于登录成功后设置密码', example='klafhjas-asdasd-asd-as-d-asd-asd-asdasd'),
    tokenType?: string(name='token_type', description='accessToken类型，Bearer', example='Bearer'),
    userId?: string(name='user_id', description='当前用户ID', example='DING-xxxxx'),
    userName?: string(name='user_name', description='当前用户名', example='cherry'),
  }

  /**
   * 
   */
  model AccountLinkRequest {
    detail?: string(name='detail', description='账号信息', example='{name:jack,age:20}'),
    identity: string(name='identity', description='唯一身份标识', example='15208333333'),
    status?: string(name='status', description='状态', example='normal'),
    type: string(name='type', description='认证类型', example='mobile'),
    userId: string(name='user_id', description='绑定的user_id', example='123987123617823'),
  }

  /**
   * 
   */
  model AddStoreRequest {
    basePath?: string(name='base_path', description='存储公共前缀', example='ccp-data'),
    bucket?: string(name='bucket', description='bucket名称', example='data-sz-bucket'),
    domainId: string(name='domain_id', description='domain ID', example='sz100'),
    endpoint: string(name='endpoint', description='存储访问地址', example='https://oss-cn-shenzhen.aliyuncs.com/'),
    ownership?: string(name='ownership', default='system', description='存储归属，system表示系统提供，custom表示使用自己的存储', enum='system, custom', example='system'),
    roleArn?: string(name='role_arn', description='访问Bucket的角色ARN', example='acs:oss:*:*:*'),
    type: string(name='type', description='存储类型，当前只支持oss', enum='oss', example='oss'),
  }

  /**
   * 
   */
  model AppAccessStrategy {
    effect?: string(name='effect'),
    exceptAppIdList?: [ string ](name='except_app_id_list', items='{"type":"string"}'),
  }

  /**
   * 
   */
  model AuthConfig {
    appId?: string(name='app_id'),
    appSecret?: string(name='app_secret'),
    enable?: boolean(name='enable'),
    endpoint?: string(name='endpoint'),
    enterpriseId?: string(name='enterprise_id'),
  }

  /**
   * Base file response
   */
  model BaseCCPFileResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    category?: string(name='category', description='category', enum='doc, image, audio, video', example='doc'),
    contentHash?: string(name='content_hash', description='Content Hash', example='EA4942AA8761213890A5C386F88E6464D2C31CA3'),
    contentHashName?: string(name='content_hash_name', description='content_hash_name', enum='sha1', example='sha1'),
    contentType?: string(name='content_type', description='content_type', example='application/json'),
    crc64Hash?: string(name='crc64_hash', description='crc64_hash'),
    createdAt?: string(name='created_at', description='created_at', example='2019-08-20T06:51:27.292Z'),
    description?: string(name='description', description='description', example='file description'),
    domainId?: string(name='domain_id', description='DomainID', example='test001', pattern='[a-z0-9A-Z]+'),
    downloadUrl?: string(name='download_url', description='download_url', example='https://ccp.data.aliyuncs.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileExtension?: string(name='file_extension', description='file_extension', example='jpg'),
    fileId?: string(name='file_id', description='file_id', example='5d5b846942cf94fa72324c14a4bda34e81da635d', maxLength=50, minLength=40, pattern='[a-z0-9]{1, 50}'),
    hidden?: boolean(name='hidden', description='Hidden
type: boolean', enum='false, true', example=false),
    imageMediaMetadata?: [ ImageMediaResponse ](name='image_media_metadata', $ref='#/definitions/ImageMediaResponse'),
    labels?: [ string ](name='labels', description='labels', example='label1:1, label2:2', items='{"type":"string"}'),
    meta?: string(name='meta', description='meta', example='file meta'),
    name: string(name='name', description='name', example='ccp.jpg', pattern='[a-zA-Z0-9.-]{1,1024}'),
    parentFileId?: string(name='parent_file_id', description='parent_file_id', example='root', maxLength=50, minLength=40, pattern='[a-z0-9]{1, 50}'),
    size?: long(name='size', description='Size', example=1024, format='int64', maximum=53687091200, minimum=0),
    starred?: boolean(name='starred', description='starred
type: boolean', example=false),
    status?: string(name='status', description='status', enum='uploading, available', example='available'),
    thumbnail?: string(name='thumbnail', description='thumbnail', example='https://ccp.data.aliyuncs.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
    trashedAt?: string(name='trashed_at', description='trashed_at', format='date-time'),
    type?: string(name='type', description='type', enum='file, folder', example='file'),
    updatedAt?: string(name='updated_at', description='updated_at', format='date-time'),
    uploadId?: string(name='upload_id', description='upload_id', example='C9DCFE5A82644AC7A02DB74C30C934A6'),
    url?: string(name='url', description='url', example='https://ccp.data.aliyuncs.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
  }

  /**
   * Base drive response
   */
  model BaseDriveResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    creator?: string(name='creator', description='Drive 创建者', example='ccp'),
    description?: string(name='description', description='Drive 备注信息', example='ccp team drive'),
    domainId?: string(name='domain_id', description='Domain ID', example='hz999'),
    driveId?: string(name='drive_id', description='Drive ID', example='123'),
    driveName?: string(name='drive_name', description='Drive 名称', example='ccpdrive'),
    driveType?: string(name='drive_type', description='Drive 类型', example='normal'),
    owner?: string(name='owner', description='Drive 所有者', example='ccp'),
    relativePath?: string(name='relative_path', description='Drive存储基于store的相对路径，domain的PathType为OSSPath时返回', example='/a/b/e/'),
    status?: string(name='status', description='Drive 状态', example='enabled'),
    storeId?: string(name='store_id', description='存储 ID, domain的PathType为OSSPath时返回', example='123'),
    totalSize?: long(name='total_size', description='Drive 空间总量', example=102400, format='int64'),
    usedSize?: long(name='used_size', description='Drive 空间已使用量', example=1024, format='int64'),
  }

  /**
   * Base file response
   */
  model BaseOSSFileResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    contentHash?: string(name='content_hash', description='Content Hash', example='EA4942AA8761213890A5C386F88E6464D2C31CA3'),
    contentHashName?: string(name='content_hash_name', description='content_hash_name', enum='sha1', example='sha1'),
    contentType?: string(name='content_type', description='content_type', example='application/json'),
    crc64Hash?: string(name='crc64_hash', description='crc64_hash'),
    createdAt?: string(name='created_at', description='created_at', example='2019-08-20T06:51:27.292Z'),
    description?: string(name='description', description='description', example='file description'),
    domainId?: string(name='domain_id', description='domain_id', example='test001', pattern='[a-z0-9A-Z]+'),
    downloadUrl?: string(name='download_url', description='download_url', example='https://ccp.data.aliyuncs.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileExtension?: string(name='file_extension', description='file_extension', example='jpg'),
    filePath?: string(name='file_path', description='file_path', example='/a.jpg'),
    name: string(name='name', description='name', example='ccp.jpg', pattern='[a-zA-Z0-9.-]{1,1024}'),
    parentFilePath?: string(name='parent_file_path', description='parent_file_id', example='/', maxLength=50, minLength=40, pattern='[a-z0-9]{1, 50}'),
    shareId?: string(name='share_id', description='share_id', example='5d5b846942cf94fa72324c14a4bda34e81da635d', pattern='[0-9]+'),
    size?: long(name='size', description='Size', example=1024, format='int64', maximum=53687091200, minimum=0),
    status?: string(name='status', description='status', enum='uploading, available', example='available'),
    thumbnail?: string(name='thumbnail', description='thumbnail', example='https://ccp.data.aliyuncs.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
    trashedAt?: string(name='trashed_at', description='trashed_at', format='date-time'),
    type?: string(name='type', description='type', enum='file, folder', example='file'),
    updatedAt?: string(name='updated_at', description='updated_at', format='date-time'),
    uploadId?: string(name='upload_id', description='upload_id', example='C9DCFE5A82644AC7A02DB74C30C934A6'),
    url?: string(name='url', description='url', example='https://ccp.data.aliyuncs.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
  }

  /**
   * List share response
   */
  model BaseShareResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    createdAt?: string(name='created_at', description='created_at', example='2006-01-02T15:04:05.999Z'),
    creator?: string(name='creator', description='creator', example='xxx'),
    description?: string(name='description', description='description', example='share description'),
    domainId?: string(name='domain_id', description='domain_id', example='domain-1'),
    driveId?: string(name='drive_id', description='drive_id', example='1'),
    expiration?: string(name='expiration', description='expiration', example='2006-01-02T15:04:05.999Z'),
    expired?: boolean(name='expired', description='expired', example=false),
    owner?: string(name='owner', description='owner', example='xxx'),
    permissions?: [ string ](name='permissions', description='permissions', example='', items='{"type":"string"}'),
    shareFilePath?: string(name='share_file_path', description='share_path', example='/a/b/c/'),
    shareId?: string(name='share_id', description='share_id', example='3d336314-63c8-4d96-bce0-17aefb6833b6'),
    shareName?: string(name='share_name', description='share_name', example='new_share'),
    status?: string(name='status', description='status', example='enabled'),
    updatedAt?: string(name='updated_at', description='updated_at', example='2006-01-02T15:04:05.999Z'),
  }

  /**
   * 
   */
  model BatchSubResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    body?: object(name='body', additionalProperties='{"type":"object"}', description='body 子请求的返回结果，可参考对于子请求文档 json 字符串', example='{"drive_id":"101","file_id":"xxxxxx"}'),
    id?: string(name='id', description='id 请求带过来的id, 可以跟 request 进行关联', example='"1"'),
    status?: long(name='status', description='status 子请求的返回状态码，可参考对于子请求文档', example=200, format='int64'),
  }

  /**
   * batch operation response
   */
  model CCPBatchResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    responses?: [ BatchSubResponse ](name='responses', description='responses 返回结果合集', items='{"$ref":"#/definitions/BatchSubResponse"}'),
  }

  /**
   * complete file response
   */
  model CCPCompleteFileResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    category?: string(name='category', description='category', enum='doc, image, audio, video', example='doc'),
    contentHash?: string(name='content_hash', description='Content Hash', example='EA4942AA8761213890A5C386F88E6464D2C31CA3'),
    contentHashName?: string(name='content_hash_name', description='content_hash_name', enum='sha1', example='sha1'),
    contentType?: string(name='content_type', description='content_type', example='application/json'),
    crc64Hash?: string(name='crc64_hash', description='crc64_hash'),
    createdAt?: string(name='created_at', description='created_at', example='2019-08-20T06:51:27.292Z'),
    description?: string(name='description', description='description', example='file description'),
    domainId?: string(name='domain_id', description='DomainID', example='test001', pattern='[a-z0-9A-Z]+'),
    downloadUrl?: string(name='download_url', description='download_url', example='https://ccp.data.aliyuncs.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileExtension?: string(name='file_extension', description='file_extension', example='jpg'),
    fileId?: string(name='file_id', description='file_id', example='5d5b846942cf94fa72324c14a4bda34e81da635d', maxLength=50, minLength=40, pattern='[a-z0-9]{1, 50}'),
    hidden?: boolean(name='hidden', description='Hidden
type: boolean', enum='false, true', example=false),
    imageMediaMetadata?: [ ImageMediaResponse ](name='image_media_metadata', $ref='#/definitions/ImageMediaResponse'),
    labels?: [ string ](name='labels', description='labels', example='label1:1, label2:2', items='{"type":"string"}'),
    meta?: string(name='meta', description='meta', example='file meta'),
    name?: string(name='name', description='name', example='ccp.jpg', pattern='[a-zA-Z0-9.-]{1,1024}'),
    parentFileId?: string(name='parent_file_id', description='parent_file_id', example='root', maxLength=50, minLength=40, pattern='[a-z0-9]{1, 50}'),
    size?: long(name='size', description='Size', example=1024, format='int64', maximum=53687091200, minimum=0),
    starred?: boolean(name='starred', description='starred
type: boolean', example=false),
    status?: string(name='status', description='status', enum='uploading, available', example='available'),
    thumbnail?: string(name='thumbnail', description='thumbnail', example='https://ccp.data.aliyuncs.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
    trashedAt?: string(name='trashed_at', description='trashed_at', format='date-time'),
    type?: string(name='type', description='type', enum='file, folder', example='file'),
    updatedAt?: string(name='updated_at', description='updated_at', format='date-time'),
    uploadId?: string(name='upload_id', description='upload_id', example='C9DCFE5A82644AC7A02DB74C30C934A6'),
    url?: string(name='url', description='url', example='https://ccp.data.aliyuncs.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
    crc?: string(name='crc', description='crc'),
  }

  /**
   * 文件拷贝 response
   */
  model CCPCopyFileResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    asyncTaskId?: string(name='async_task_id', description='async_task_id', example='000e89fb-cf8f-11e9-8ab4-b6e980803a3b'),
    domainId?: string(name='domain_id', description='DomainID', example='test001', pattern='[a-z0-9A-Z]+'),
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileId?: string(name='file_id', description='file_id', example='5d5b846942cf94fa72324c14a4bda34e81da635d', maxLength=50, minLength=40, pattern='[a-z0-9]{1, 50}'),
  }

  /**
   * Create file response
   */
  model CCPCreateFileResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    domainId?: string(name='domain_id', description='domain_id', example='domain', maxLength=50, minLength=40, pattern='[a-z0-9]{1, 50}'),
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileId?: string(name='file_id', description='file_id', example='5d79206586bb5dd69fb34c349282718146c55da7', maxLength=50, minLength=40, pattern='[a-z0-9]{1, 50}'),
    parentFileId?: string(name='parent_file_id', description='parent_file_id', example='root', maxLength=50, minLength=40, pattern='[a-z0-9]{1, 50}'),
    partInfoList?: [ UploadPartInfo ](name='part_info_list', description='part_info_list', example='[', items='{"$ref":"#/definitions/UploadPartInfo"}'),
    rapidUpload?: boolean(name='rapid_upload', description='rapid_upload
type: boolean', example=false),
    type?: string(name='type', description='type', enum='file, folder', example='file'),
    uploadId?: string(name='upload_id', description='upload_id', example='C9DCFE5A82644AC7A02DB74C30C934A6'),
  }

  /**
   * 删除文件 response
   */
  model CCPDeleteFileResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    asyncTaskId?: string(name='async_task_id', description='async_task_id', example='000e89fb-cf8f-11e9-8ab4-b6e980803a3b'),
    domainId?: string(name='domain_id', description='domain_id', example='test001', pattern='[a-z0-9A-Z]+'),
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileId?: string(name='file_id', description='file_id', example='5d5b846942cf94fa72324c14a4bda34e81da635d', maxLength=50, minLength=40, pattern='[a-z0-9]{1, 50}'),
  }

  /**
   * 批量删除文件 response
   */
  model CCPDeleteFilesResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    deletedFileIdList?: [ string ](name='deleted_file_id_list', description='deleted_file_id_list', example='', items='{"type":"string"}'),
    domainId?: string(name='domain_id', description='domain_id', example='test001', pattern='[a-z0-9A-Z]+'),
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
  }

  /**
   * Get AsyncTask Response
   */
  model CCPGetAsyncTaskResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    asyncTaskId?: string(name='async_task_id', description='async_task_id
type:string', example='000e89fb-cf8f-11e9-8ab4-b6e980803a3b'),
    message?: string(name='message', description='message', example='task is running'),
    state?: string(name='state', description='state', enum='Running, Failed, Succeed', example='success'),
  }

  /**
   * 获取download url response
   */
  model CCPGetDownloadUrlResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    expiration?: string(name='expiration', description='expiration', example='2006-01-02T15:04:05.999Z07:00'),
    method?: string(name='method', description='method', example='GET'),
    url?: string(name='url', description='url', example='https://ccp.data.aliyuncs.com/hz22%2F5d79219b0aa9a7c995a94a96993ba3205cd91c5a%2F5d79219bf3261a5d38744da0834ed489b677a27a?Expires=xxxOSSAccessKeyId=xxx&Signature=xxx&response-content-disposition=attachment%3Bfilename%3DtBiZAoJPC2c8b13450eda4292b7f5f8010618e078.txt'),
  }

  /**
   * 获取文件元数据response
   */
  model CCPGetFileResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    category?: string(name='category', description='category', enum='doc, image, audio, video', example='doc'),
    contentHash?: string(name='content_hash', description='Content Hash', example='EA4942AA8761213890A5C386F88E6464D2C31CA3'),
    contentHashName?: string(name='content_hash_name', description='content_hash_name', enum='sha1', example='sha1'),
    contentType?: string(name='content_type', description='content_type', example='application/json'),
    crc64Hash?: string(name='crc64_hash', description='crc64_hash'),
    createdAt?: string(name='created_at', description='created_at', example='2019-08-20T06:51:27.292Z'),
    description?: string(name='description', description='description', example='file description'),
    domainId?: string(name='domain_id', description='DomainID', example='test001', pattern='[a-z0-9A-Z]+'),
    downloadUrl?: string(name='download_url', description='download_url', example='https://ccp.data.aliyuncs.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileExtension?: string(name='file_extension', description='file_extension', example='jpg'),
    fileId?: string(name='file_id', description='file_id', example='5d5b846942cf94fa72324c14a4bda34e81da635d', maxLength=50, minLength=40, pattern='[a-z0-9]{1, 50}'),
    hidden?: boolean(name='hidden', description='Hidden
type: boolean', enum='false, true', example=false),
    imageMediaMetadata?: [ ImageMediaResponse ](name='image_media_metadata', $ref='#/definitions/ImageMediaResponse'),
    labels?: [ string ](name='labels', description='labels', example='label1:1, label2:2', items='{"type":"string"}'),
    meta?: string(name='meta', description='meta', example='file meta'),
    name?: string(name='name', description='name', example='ccp.jpg', pattern='[a-zA-Z0-9.-]{1,1024}'),
    parentFileId?: string(name='parent_file_id', description='parent_file_id', example='root', maxLength=50, minLength=40, pattern='[a-z0-9]{1, 50}'),
    size?: long(name='size', description='Size', example=1024, format='int64', maximum=53687091200, minimum=0),
    starred?: boolean(name='starred', description='starred
type: boolean', example=false),
    status?: string(name='status', description='status', enum='uploading, available', example='available'),
    thumbnail?: string(name='thumbnail', description='thumbnail', example='https://ccp.data.aliyuncs.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
    trashedAt?: string(name='trashed_at', description='trashed_at', format='date-time'),
    type?: string(name='type', description='type', enum='file, folder', example='file'),
    updatedAt?: string(name='updated_at', description='updated_at', format='date-time'),
    uploadId?: string(name='upload_id', description='upload_id', example='C9DCFE5A82644AC7A02DB74C30C934A6'),
    url?: string(name='url', description='url', example='https://ccp.data.aliyuncs.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
  }

  /**
   * Get UploadUrl Response
   */
  model CCPGetUploadUrlResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    createAt?: string(name='create_at', description='created_at', example='2019-09-11T16:34:36.977Z'),
    domainId?: string(name='domain_id', description='domain_id', example='test001', pattern='[a-z0-9A-Z]+'),
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileId?: string(name='file_id', description='file_id', example='5d5b846942cf94fa72324c14a4bda34e81da635d', maxLength=50, minLength=40, pattern='[a-z0-9]{1, 50}'),
    partInfoList?: [ UploadPartInfo ](name='part_info_list', description='part_info_list', example='', items='{"$ref":"#/definitions/UploadPartInfo"}'),
    uploadId?: string(name='upload_id', description='upload_id', example='F3C25CDFA5C74ECB8DE32672F6211FD4'),
  }

  /**
   * List file response
   */
  model CCPListFileResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    items?: [ BaseCCPFileResponse ](name='items', description='items', example='', items='{"$ref":"#/definitions/BaseCCPFileResponse"}', maxItems=100),
    nextMarker?: string(name='next_marker', description='next_marker', example='NWQ1YmI4MjA0ZGU1ZWNjYzAzODM0ZDVkODlkMWJiMzcyNzM1NTU4OA'),
  }

  /**
   * 获取签名 response
   */
  model CCPListUploadedPartResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    fileId?: string(name='file_id', description='file_id', example='5d5b846942cf94fa72324c14a4bda34e81da635d', maxLength=50, minLength=40, pattern='[a-z0-9]{1, 50}'),
    nextPartNumberMarker?: string(name='next_part_number_marker', description='next_part_number_marker', example='4'),
    uploadId?: string(name='upload_id', description='upload_id', example='F3C25CDFA5C74ECB8DE32672F6211FD4'),
    uploadedParts?: [ UploadPartInfo ](name='uploaded_parts', description='uploaded_parts', example='', items='{"$ref":"#/definitions/UploadPartInfo"}'),
  }

  /**
   * 文件移动 response
   */
  model CCPMoveFileResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    asyncTaskId?: string(name='async_task_id', description='async_task_id', example='000e89fb-cf8f-11e9-8ab4-b6e980803a3b'),
    domainId?: string(name='domain_id', description='DomainID', example='test001', pattern='[a-z0-9A-Z]+'),
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileId?: string(name='file_id', description='file_id', example='5d5b846942cf94fa72324c14a4bda34e81da635d', maxLength=50, minLength=40, pattern='[a-z0-9]{1, 50}'),
  }

  /**
   * search file response
   */
  model CCPSearchFileResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    items?: [ BaseCCPFileResponse ](name='items', description='items', example='', items='{"$ref":"#/definitions/BaseCCPFileResponse"}', maxItems=100),
    nextMarker?: string(name='next_marker', description='next_marker', example='NWQ1YmI4MjA0ZGU1ZWNjYzAzODM0ZDVkODlkMWJiMzcyNzM1NTU4OA'),
  }

  /**
   * 更新文件元数据 response
   */
  model CCPUpdateFileMetaResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    category?: string(name='category', description='category', enum='doc, image, audio, video', example='doc'),
    contentHash?: string(name='content_hash', description='Content Hash', example='EA4942AA8761213890A5C386F88E6464D2C31CA3'),
    contentHashName?: string(name='content_hash_name', description='content_hash_name', enum='sha1', example='sha1'),
    contentType?: string(name='content_type', description='content_type', example='application/json'),
    crc64Hash?: string(name='crc64_hash', description='crc64_hash'),
    createdAt?: string(name='created_at', description='created_at', example='2019-08-20T06:51:27.292Z'),
    description?: string(name='description', description='description', example='file description'),
    domainId?: string(name='domain_id', description='DomainID', example='test001', pattern='[a-z0-9A-Z]+'),
    downloadUrl?: string(name='download_url', description='download_url', example='https://ccp.data.aliyuncs.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileExtension?: string(name='file_extension', description='file_extension', example='jpg'),
    fileId?: string(name='file_id', description='file_id', example='5d5b846942cf94fa72324c14a4bda34e81da635d', maxLength=50, minLength=40, pattern='[a-z0-9]{1, 50}'),
    hidden?: boolean(name='hidden', description='Hidden
type: boolean', enum='false, true', example=false),
    imageMediaMetadata?: [ ImageMediaResponse ](name='image_media_metadata', $ref='#/definitions/ImageMediaResponse'),
    labels?: [ string ](name='labels', description='labels', example='label1:1, label2:2', items='{"type":"string"}'),
    meta?: string(name='meta', description='meta', example='file meta'),
    name?: string(name='name', description='name', example='ccp.jpg', pattern='[a-zA-Z0-9.-]{1,1024}'),
    parentFileId?: string(name='parent_file_id', description='parent_file_id', example='root', maxLength=50, minLength=40, pattern='[a-z0-9]{1, 50}'),
    size?: long(name='size', description='Size', example=1024, format='int64', maximum=53687091200, minimum=0),
    starred?: boolean(name='starred', description='starred
type: boolean', example=false),
    status?: string(name='status', description='status', enum='uploading, available', example='available'),
    thumbnail?: string(name='thumbnail', description='thumbnail', example='https://ccp.data.aliyuncs.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
    trashedAt?: string(name='trashed_at', description='trashed_at', format='date-time'),
    type?: string(name='type', description='type', enum='file, folder', example='file'),
    updatedAt?: string(name='updated_at', description='updated_at', format='date-time'),
    uploadId?: string(name='upload_id', description='upload_id', example='C9DCFE5A82644AC7A02DB74C30C934A6'),
    url?: string(name='url', description='url', example='https://ccp.data.aliyuncs.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
  }

  /**
   * 
   */
  model CancelLinkRequest {
    temporaryToken: string(name='temporary_token', description='待绑定的临时token，此token只能访问绑定、取消绑定接口', example='ey***s='),
  }

  /**
   * 
   */
  model Captcha {
    captcha: string(name='captcha', description='图片验证码，base64格式', example='iVBORw0KGgoAAAANSUhEUgAAAFAAAAAaCAIAAACvsEzwAAABRElEQVR42t3YsQ4CIQwA0CZ+i36Bg5uTo1/gqquDTvf1JwkJqRR7vZYCJ2HClOMBVw5h/i7P9yvU+X8LFFsju728wRNhcQR+gyj27G2GtQGHxy5USaN6PV1n2Qt8Ou6ZKllPJ/MQ4PN0CzXrs9i4jS2dIelKMuBse18vd1zdweHZdnC2V3kwDsm0OnYHMDVLtnQICbZ0XuIpqAamaaMjmGbvOAV0Fmqew7XAmXlV0kqButcYhDs5PqYiGA9dDm6atCK7bpbGx5Jknxszlj5pYR5t8QMX8b5gLMSVCZGfw4svdtHsDqZmPooHJxte5NTCnx3twKvKIhgLcaXrSbP0iGBhIK/99aXlnrQst1/7BajDt7Txxl/rrqvuBOaGJY3Szt4GOBuoka2LhQYw/ic1eyww/5eV95x229IDmqHlS1vdrOjkA5iK2BYUhM2zAAAAAElFTkSuQmCC'),
    captchaFormat: string(name='captcha_format', description='图片格式', example='png'),
    captchaId: string(name='captcha_id', description='图片验证码ID', example='f4690fc255e2fb24c10ede079d3802b4cClRimRh67Q'),
  }

  /**
   * 
   */
  model ConfirmLinkRequest {
    temporaryToken: string(name='temporary_token', description='待绑定的临时token，此token只能访问绑定、取消绑定接口', example='ey***s='),
  }

  /**
   * 
   */
  model CorsRule {
    allowedHeader?: [ string ](name='allowed_header', description='AllowedHeader', example='h*', items='{"type":"string"}'),
    allowedMethod?: [ string ](name='allowed_method', description='AllowedMethod', example='PUT, GET', items='{"type":"string"}'),
    allowedOrigin?: [ string ](name='allowed_origin', description='AllowedOrigin', example='*', items='{"type":"string"}'),
    exposeHeader?: [ string ](name='expose_header', description='ExposeHeader', example='ETag', items='{"type":"string"}'),
    maxAgeSeconds?: long(name='max_age_seconds', description='MaxAgeSeconds', example=0, format='int64'),
  }

  /**
   * 
   */
  model CreateAppRequest {
    appName: string(name='app_name', description='App名称', example='图片分享应用', maxLength=128, minLength=1),
    description?: string(name='description', description='App描述', example='测试专用', maxLength=128, minLength=0),
    isThirdParty?: boolean(name='is_third_party', default=false, description='是否是domain私有App', example=false),
    logo: string(name='logo', description='App图标', example='https://app.com/logo.jpg'),
    redirectUri?: string(name='redirect_uri', description='App回调地址', example='https://app.com/callback'),
    scope: [ string ](name='scope', description='App权限列表', enum='FILE.ALL, SHARE.ALL, STORAGEFILE.ALL, STORAGE.ALL, DRIVE.ALL, USER.ALL', items='{"type":"string"}'),
    type: string(name='type', default='WebServer', description='App类型', enum='WebServer, WebBrowser, Native', example='WebServer'),
  }

  /**
   * create domain request
   */
  model CreateDomainRequest {
    authAlipayAppId?: string(name='auth_alipay_app_id', description='支付宝 App Id', example='abc'),
    authAlipayEnbale?: boolean(name='auth_alipay_enbale', description='启用支付宝认证', example=true),
    authAlipayPrivateKey?: string(name='auth_alipay_private_key', description='支付宝 App Secret', example='abc'),
    authConfig?: object(name='auth_config', additionalProperties='{"$ref":"#/definitions/AuthConfig"}', description='登录相关信息', example='{}'),
    authDingdingAppId?: string(name='auth_dingding_app_id', description='钉钉 App Id', example='abc'),
    authDingdingAppSecret?: string(name='auth_dingding_app_secret', description='钉钉 App Secret', example='abc'),
    authDingdingEnable?: boolean(name='auth_dingding_enable', description='启用钉钉认证', example=true),
    authEndpointEnable?: boolean(name='auth_endpoint_enable'),
    authRamAppId?: string(name='auth_ram_app_id', description='RAM App Id', example='abc'),
    authRamAppSecret?: string(name='auth_ram_app_secret', description='RAM App Secret', example='abc'),
    authRamEnable?: boolean(name='auth_ram_enable', description='启用 RAM 认证', example=true),
    dataHashName?: string(name='data_hash_name', description='数据 Hash 算法', example='sha1'),
    description?: string(name='description', description='Domain 描述', example='my test domain'),
    domainName: string(name='domain_name', description='Domain 名称', example='test_domain'),
    eventFilenameMatches?: string(name='event_filename_matches', description='事件通知 MNS 匹配文件名', example='abc'),
    eventMnsEndpoint?: string(name='event_mns_endpoint', description='事件通知 MNS Endpoint', example='http://abc.mns.cn-shenzhen.aliyuncs.com'),
    eventMnsTopic?: string(name='event_mns_topic', description='事件通知 MNS Topic', example='abc'),
    eventNames?: [ string ](name='event_names', description='事件名列表', example='abc', items='{"type":"string"}'),
    eventRoleArn?: string(name='event_role_arn', description='事件通知 Role Arn'),
    initDriveEnable?: boolean(name='init_drive_enable', description='开启自动初始化 Drive', example=true),
    initDriveSize?: long(name='init_drive_size', description='自动初始化 Drive 大小', example=1024, format='int64'),
    pathType: string(name='path_type', description='Domain 类型', example='CCPPath'),
    publishedAppAccessStrategy?: [ AppAccessStrategy ](name='published_app_access_strategy', $ref='#/definitions/AppAccessStrategy'),
    sharable?: boolean(name='sharable', description='开启分享', example=true),
    storeLevel?: string(name='store_level', description='存储级别', example='Standard'),
    storeRegionList: [ string ](name='store_region_list', description='存储 Region 列表', example='cn-hangzhou', items='{"type":"string"}'),
  }

  /**
   * Create drive response
   */
  model CreateDriveResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    domainId?: string(name='domain_id', description='Domain ID', example='hz999'),
    driveId?: string(name='drive_id', description='Drive ID', example='123'),
  }

  /**
   * Create share response
   */
  model CreateShareResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    domainId?: string(name='domain_id', description='domain_id', example='domain-1'),
    shareId?: string(name='share_id', description='share_id', example='3d336314-63c8-4d96-bce0-17aefb6833b6'),
  }

  /**
   * 
   */
  model DefaultChangePasswordRequest {
    appId: string(name='app_id', description='App ID, 当前访问的App', example='csaklidwasdhjwid'),
    newPassword: string(name='new_password', description='新密码，必须包含数字和字母，长度8-32个字符', example='123456,abc'),
    phoneNumber: string(name='phone_number', description='手机号', example='152*****341'),
    smsCode: string(name='sms_code', description='短信验证码内容', example='1234'),
    smsCodeId: string(name='sms_code_id', description='短信验证码ID', example='csjanwia'),
  }

  /**
   * 
   */
  model DefaultSetPasswordRequest {
    appId: string(name='app_id', description='App ID, 当前访问的App', example='csaklidwasdhjwid'),
    newPassword: string(name='new_password', description='新密码，必须包含数字和字母，长度8-32个字符', example='123456,abc'),
    state: string(name='state', description='临时操作权限码', example='abc'),
  }

  /**
   * 
   */
  model DeleteAppRequest {
    appId: string(name='app_id', description='App ID', example='CNMrhxwPJHAReExa'),
  }

  /**
   * delete domain request
   */
  model DeleteDomainRequest {
    domainId: string(name='domain_id', description='Domain ID', example='sz111'),
  }

  /**
   * delete drive response
   */
  model DeleteDriveResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
  }

  /**
   * 
   */
  model GetAccessTokenByLinkInfoRequest {
    identity: string(name='identity', description='唯一身份标识', example='15208333333'),
    type: string(name='type', description='认证类型', example='mobile'),
  }

  /**
   * 
   */
  model GetAppRequest {
    appId: string(name='app_id', description='App ID', example='CNMrhxwPJHAReExa'),
  }

  /**
   * 
   */
  model GetByLinkInfoRequest {
    identity: string(name='identity', description='唯一身份标识', example='15208333333'),
    type: string(name='type', description='认证类型', example='mobile'),
  }

  /**
   * 
   */
  model GetCaptchaRequest {
    appId: string(name='app_id', description='App ID, 当前访问的App', example='csaklidwasdhjwid'),
  }

  /**
   * get domain request
   */
  model GetDomainRequest {
    domainId: string(name='domain_id', description='Domain ID', example='sz111'),
  }

  /**
   * Get drive response
   */
  model GetDriveResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    creator?: string(name='creator', description='Drive 创建者', example='ccp'),
    description?: string(name='description', description='Drive 备注信息', example='ccp team drive'),
    domainId?: string(name='domain_id', description='Domain ID', example='hz999'),
    driveId?: string(name='drive_id', description='Drive ID', example='123'),
    driveName?: string(name='drive_name', description='Drive 名称', example='ccpdrive'),
    driveType?: string(name='drive_type', description='Drive 类型', example='normal'),
    owner?: string(name='owner', description='Drive 所有者', example='ccp'),
    relativePath?: string(name='relative_path', description='Drive存储基于store的相对路径，domain的PathType为OSSPath时返回', example='/a/b/e/'),
    status?: string(name='status', description='Drive 状态', example='enabled'),
    storeId?: string(name='store_id', description='存储 ID, domain的PathType为OSSPath时返回', example='123'),
    totalSize?: long(name='total_size', description='Drive 空间总量', example=102400, format='int64'),
    usedSize?: long(name='used_size', description='Drive 空间已使用量', example=1024, format='int64'),
  }

  /**
   * 
   */
  model GetLinkInfoByUserIDRequest {
    userId: string(name='user_id', description='user ID', example='123987123617823'),
  }

  /**
   * Get share response
   */
  model GetShareResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    createdAt?: string(name='created_at', description='created_at', example='2006-01-02T15:04:05.999Z'),
    creator?: string(name='creator', description='creator', example='xxx'),
    description?: string(name='description', description='description', example='share description'),
    domainId?: string(name='domain_id', description='domain_id', example='domain-1'),
    driveId?: string(name='drive_id', description='drive_id', example='1'),
    expiration?: string(name='expiration', description='expiration', example='2006-01-02T15:04:05.999Z'),
    expired?: boolean(name='expired', description='expired', example=false),
    owner?: string(name='owner', description='owner', example='xxx'),
    permissions?: [ string ](name='permissions', description='permissions', example='', items='{"type":"string"}'),
    shareFilePath?: string(name='share_file_path', description='share_path', example='/a/b/c/'),
    shareId?: string(name='share_id', description='share_id', example='3d336314-63c8-4d96-bce0-17aefb6833b6'),
    shareName?: string(name='share_name', description='share_name', example='new_share'),
    status?: string(name='status', description='status', example='enabled'),
    updatedAt?: string(name='updated_at', description='updated_at', example='2006-01-02T15:04:05.999Z'),
  }

  /**
   * 
   */
  model ImageMediaResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    height?: long(name='height', default=0, description='height', example=720, format='int64'),
    time?: string(name='time', description='time', format='date-time'),
    width?: long(name='width', default=0, description='width', example=1024, format='int64'),
  }

  /**
   * 
   */
  model LinkInfo {
    identity?: string(name='identity', description='当前用户已存在的登录标识', example='15208345000'),
    type?: string(name='type', description='当前用户已存在的登录方式', example='mobile'),
  }

  /**
   * 
   */
  model LinkInfoListResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    items: [ LinkInfoResponse ](name='items', description='items', example='', items='{"$ref":"#/definitions/LinkInfoResponse"}'),
  }

  /**
   * 
   */
  model LinkInfoResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    authenticationType: string(name='authentication_type', description='认证类型', example='mobile'),
    createdAt: long(name='created_at', description='创建时间', example=1556163159820, format='int64'),
    domainId: string(name='domain_id', description='Domain ID', example='5000'),
    identity: string(name='identity', description='唯一身份标识', example='15208345000'),
    lastLoginTime: long(name='last_login_time', description='最后登录时间', example=1556163159820, format='int64'),
    status: string(name='status', description='状态', example='normal'),
    userId: string(name='user_id', description='用户ID', example='00016a587b62b50003deea299a4f5b50'),
  }

  /**
   * 
   */
  model ListAppsRequest {
    limit?: integer(name='limit', default=50, description='返回结果数据', example=100, format='int32', maximum=100, minimum=1),
    marker?: string(name='marker', description='下次查询游标', example='ncsajnsalsa='),
  }

  /**
   * list domain request
   */
  model ListDomainsRequest {
    limit?: integer(name='limit', description='分页大小', example=100, format='int32', maximum=100, minimum=1),
    marker?: string(name='marker', description='查询游标', example='abcd'),
  }

  /**
   * list drive response
   */
  model ListDriveResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    items?: [ BaseDriveResponse ](name='items', description='Drive 列表', items='{"$ref":"#/definitions/BaseDriveResponse"}'),
    nextMarker?: string(name='next_marker', description='翻页标记', example='marker'),
  }

  /**
   * List share response
   */
  model ListShareResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    items?: [ BaseShareResponse ](name='items', description='items', example='', items='{"$ref":"#/definitions/BaseShareResponse"}'),
    nextMarker?: string(name='next_marker', description='next_marker'),
  }

  /**
   * List storage file
   */
  model ListStoreFileResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    items?: [ StoreFile ](name='items', description='items
file list', example='', items='{"$ref":"#/definitions/StoreFile"}'),
    nextMarker?: string(name='next_marker'),
  }

  /**
   * List storage
   */
  model ListStoreResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    items?: [ StoreItemResponse ](name='items', description='items', example='', items='{"$ref":"#/definitions/StoreItemResponse"}'),
  }

  /**
   * 
   */
  model ListStoresRequest {
    domainId: string(name='domain_id', description='domain ID', example='sz100'),
  }

  /**
   * 
   */
  model LoginByCodeRequest {
    accessToken?: string(name='access_token', description='鉴权后返回的accessToken，淘宝登录需要此字段', example='csaklidwasdhjwid'),
    appId: string(name='app_id', description='App ID, 当前访问的App', example='csaklidwasdhjwid'),
    authCode?: string(name='auth_code', description='鉴权后返回的AuthCode，支付宝登录需要此字段', example='csaklidwasdhjwid'),
    type: string(name='type', description='鉴权类型，淘宝、支付宝', enum='taobao, alipay', example='taobao'),
  }

  /**
   * 
   */
  model MobileCheckExistRequest {
    appId: string(name='app_id', description='App ID, 当前访问的App', example='csaklidwasdhjwid'),
    phoneNumber: string(name='phone_number', description='待查询的手机号', example='152*****341'),
  }

  /**
   * 
   */
  model MobileCheckExistResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    isExist: boolean(name='is_exist', description='当前手机号是否存在', example=true),
    phoneNumber: string(name='phone_number', description='待查询的手机号', example='152*****341'),
  }

  /**
   * 
   */
  model MobileLoginRequest {
    appId: string(name='app_id', description='App ID, 当前访问的App', example='csaklidwasdhjwid'),
    autoRegister?: boolean(name='auto_register', default=false, description='是否自动注册用户，使用密码登录此参数不生效', example=false),
    captchaId?: string(name='captcha_id', description='图片验证码ID, 密码登录需要此参数', example='abc'),
    captchaText?: string(name='captcha_text', description='用户输入的验证码值, 密码登录需要此参数', example='abc'),
    password?: string(name='password', description='登录密码, 传入此参数则忽略短信验证码，不传此参数则默认使用短信登录。', example='123456'),
    phoneNumber: string(name='phone_number', description='待查询的手机号', example='152*****341'),
    smsCode?: string(name='sms_code', description='短信验证码内容，使用密码登录此参数不生效', example='1234'),
    smsCodeId?: string(name='sms_code_id', description='短信验证码ID，使用密码登录此参数不生效', example='csjanwia'),
  }

  /**
   * 
   */
  model MobileRegisterRequest {
    appId: string(name='app_id', description='App ID, 当前访问的App', example='csaklidwasdhjwid'),
    phoneNumber: string(name='phone_number', description='待查询的手机号', example='152*****341'),
    smsCode: string(name='sms_code', description='短信验证码内容', example='1234'),
    smsCodeId: string(name='sms_code_id', description='短信验证码ID', example='csjanwia'),
  }

  /**
   * 
   */
  model MobileSendSmsCodeRequest {
    appId: string(name='app_id', description='App ID, 当前访问的App', example='csaklidwasdhjwid'),
    captchaId?: string(name='captcha_id', description='图片验证码ID', example='abc'),
    captchaText?: string(name='captcha_text', description='用户输入的验证码值', example='abc'),
    phoneNumber: string(name='phone_number', description='待发送验证短信的手机号', example='152*****341'),
    type: string(name='type', description='验证码用途', example='abc'),
  }

  /**
   * 
   */
  model MobileSendSmsCodeResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    smsCodeId: string(name='sms_code_id', description='短信验证码ID', example='csjanwia'),
  }

  /**
   * complete file response
   */
  model OSSCompleteFileResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    contentHash?: string(name='content_hash', description='Content Hash', example='EA4942AA8761213890A5C386F88E6464D2C31CA3'),
    contentHashName?: string(name='content_hash_name', description='content_hash_name', enum='sha1', example='sha1'),
    contentType?: string(name='content_type', description='content_type', example='application/json'),
    crc64Hash?: string(name='crc64_hash', description='crc64_hash'),
    createdAt?: string(name='created_at', description='created_at', example='2019-08-20T06:51:27.292Z'),
    description?: string(name='description', description='description', example='file description'),
    domainId?: string(name='domain_id', description='domain_id', example='test001', pattern='[a-z0-9A-Z]+'),
    downloadUrl?: string(name='download_url', description='download_url', example='https://ccp.data.aliyuncs.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileExtension?: string(name='file_extension', description='file_extension', example='jpg'),
    filePath?: string(name='file_path', description='file_path', example='/a.jpg'),
    name?: string(name='name', description='name', example='ccp.jpg', pattern='[a-zA-Z0-9.-]{1,1024}'),
    parentFilePath?: string(name='parent_file_path', description='parent_file_id', example='/', maxLength=50, minLength=40, pattern='[a-z0-9]{1, 50}'),
    shareId?: string(name='share_id', description='share_id', example='5d5b846942cf94fa72324c14a4bda34e81da635d', pattern='[0-9]+'),
    size?: long(name='size', description='Size', example=1024, format='int64', maximum=53687091200, minimum=0),
    status?: string(name='status', description='status', enum='uploading, available', example='available'),
    thumbnail?: string(name='thumbnail', description='thumbnail', example='https://ccp.data.aliyuncs.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
    trashedAt?: string(name='trashed_at', description='trashed_at', format='date-time'),
    type?: string(name='type', description='type', enum='file, folder', example='file'),
    updatedAt?: string(name='updated_at', description='updated_at', format='date-time'),
    uploadId?: string(name='upload_id', description='upload_id', example='C9DCFE5A82644AC7A02DB74C30C934A6'),
    url?: string(name='url', description='url', example='https://ccp.data.aliyuncs.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
    crc?: string(name='crc', description='crc'),
  }

  /**
   * 文件拷贝 response
   */
  model OSSCopyFileResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    asyncTaskId?: string(name='async_task_id', description='async_task_id', example='000e89fb-cf8f-11e9-8ab4-b6e980803a3b'),
    domainId?: string(name='domain_id', description='domain_id', example='test001', pattern='[a-z0-9A-Z-]+'),
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    filePath?: string(name='file_path', description='file_path', example='/a/b/c.jpg'),
    shareId?: string(name='share_id', description='drive_id', example='test001', pattern='[a-z0-9A-Z]+'),
  }

  /**
   * Create file response
   */
  model OSSCreateFileResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    domainId?: string(name='domain_id', description='domain_id', example='domain', maxLength=50, minLength=40, pattern='[a-z0-9]{1, 50}'),
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    filePath?: string(name='file_path', description='file_path', example='/a/b/c.jpg'),
    partInfoList?: [ UploadPartInfo ](name='part_info_list', description='part_info_list', example='[', items='{"$ref":"#/definitions/UploadPartInfo"}'),
    shareId?: string(name='share_id', description='share_id', example='1', pattern='[0-9]+'),
    type?: string(name='type', description='type', enum='file, folder', example='file'),
    uploadId?: string(name='upload_id', description='upload_id', example='C9DCFE5A82644AC7A02DB74C30C934A6'),
  }

  /**
   * 删除文件 response
   */
  model OSSDeleteFileResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    asyncTaskId?: string(name='async_task_id', description='async_task_id', example='000e89fb-cf8f-11e9-8ab4-b6e980803a3b'),
    domainId?: string(name='domain_id', description='domain_id', example='test001', pattern='[a-z0-9A-Z]+'),
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    filePath?: string(name='file_path', description='file_path', example='/a/b/c.jpg'),
    shareId?: string(name='share_id', description='share_id', example='5d5b846942cf94fa72324c14a4bda34e81da635d', pattern='[a-z0-9A-Z]+'),
  }

  /**
   * 批量删除文件 response
   */
  model OSSDeleteFilesResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    deletedFileIdList?: [ string ](name='deleted_file_id_list', description='deleted_file_id_list', example='', items='{"type":"string"}'),
    domainId?: string(name='domain_id', description='domain_id', example='test001', pattern='[a-z0-9A-Z]+'),
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    shareId?: string(name='share_id', description='share_id', example='1', pattern='[0-9]+'),
  }

  /**
   * 获取download url response
   */
  model OSSGetDownloadUrlResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    expiration?: string(name='expiration', description='expiration', example='2006-01-02T15:04:05.999Z07:00'),
    method?: string(name='method', description='method', example='GET'),
    url?: string(name='url', description='url', example='https://ccp.data.aliyuncs.com/hz22%2F5d79219b0aa9a7c995a94a96993ba3205cd91c5a%2F5d79219bf3261a5d38744da0834ed489b677a27a?Expires=xxxOSSAccessKeyId=xxx&Signature=xxx&response-content-disposition=attachment%3Bfilename%3DtBiZAoJPC2c8b13450eda4292b7f5f8010618e078.txt'),
  }

  /**
   * 获取文件元数据response
   */
  model OSSGetFileResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    contentHash?: string(name='content_hash', description='Content Hash', example='EA4942AA8761213890A5C386F88E6464D2C31CA3'),
    contentHashName?: string(name='content_hash_name', description='content_hash_name', enum='sha1', example='sha1'),
    contentType?: string(name='content_type', description='content_type', example='application/json'),
    crc64Hash?: string(name='crc64_hash', description='crc64_hash'),
    createdAt?: string(name='created_at', description='created_at', example='2019-08-20T06:51:27.292Z'),
    description?: string(name='description', description='description', example='file description'),
    domainId?: string(name='domain_id', description='domain_id', example='test001', pattern='[a-z0-9A-Z]+'),
    downloadUrl?: string(name='download_url', description='download_url', example='https://ccp.data.aliyuncs.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileExtension?: string(name='file_extension', description='file_extension', example='jpg'),
    filePath?: string(name='file_path', description='file_path', example='/a.jpg'),
    name?: string(name='name', description='name', example='ccp.jpg', pattern='[a-zA-Z0-9.-]{1,1024}'),
    parentFilePath?: string(name='parent_file_path', description='parent_file_id', example='/', maxLength=50, minLength=40, pattern='[a-z0-9]{1, 50}'),
    shareId?: string(name='share_id', description='share_id', example='5d5b846942cf94fa72324c14a4bda34e81da635d', pattern='[0-9]+'),
    size?: long(name='size', description='Size', example=1024, format='int64', maximum=53687091200, minimum=0),
    status?: string(name='status', description='status', enum='uploading, available', example='available'),
    thumbnail?: string(name='thumbnail', description='thumbnail', example='https://ccp.data.aliyuncs.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
    trashedAt?: string(name='trashed_at', description='trashed_at', format='date-time'),
    type?: string(name='type', description='type', enum='file, folder', example='file'),
    updatedAt?: string(name='updated_at', description='updated_at', format='date-time'),
    uploadId?: string(name='upload_id', description='upload_id', example='C9DCFE5A82644AC7A02DB74C30C934A6'),
    url?: string(name='url', description='url', example='https://ccp.data.aliyuncs.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
  }

  /**
   * Get UploadUrl Response
   */
  model OSSGetUploadUrlResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    createAt?: string(name='create_at', description='created_at', example='2019-09-11T16:34:36.977Z'),
    domainId?: string(name='domain_id', description='domain_id', example='test001', pattern='[a-z0-9A-Z]+'),
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    filePath?: string(name='file_path', description='file_path', example='/a/b/c.jpg'),
    partInfoList?: [ UploadPartInfo ](name='part_info_list', description='part_info_list', example='', items='{"$ref":"#/definitions/UploadPartInfo"}'),
    uploadId?: string(name='upload_id', description='upload_id', example='F3C25CDFA5C74ECB8DE32672F6211FD4'),
  }

  /**
   * List file response
   */
  model OSSListFileResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    items?: [ BaseOSSFileResponse ](name='items', description='items', example='', items='{"$ref":"#/definitions/BaseOSSFileResponse"}', maxItems=100),
    nextMarker?: string(name='next_marker', description='next_marker', example='NWQ1YmI4MjA0ZGU1ZWNjYzAzODM0ZDVkODlkMWJiMzcyNzM1NTU4OA'),
  }

  /**
   * 获取签名 response
   */
  model OSSListUploadedPartResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    filePath?: string(name='file_path', description='file_path', example='/a/b/c.jpg'),
    nextPartNumberMarker?: string(name='next_part_number_marker', description='next_part_number_marker', example='4'),
    uploadId?: string(name='upload_id', description='upload_id', example='F3C25CDFA5C74ECB8DE32672F6211FD4'),
    uploadedParts?: [ UploadPartInfo ](name='uploaded_parts', description='uploaded_parts', example='', items='{"$ref":"#/definitions/UploadPartInfo"}'),
  }

  /**
   * 文件移动 response
   */
  model OSSMoveFileResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    asyncTaskId?: string(name='async_task_id', description='async_task_id', example='000e89fb-cf8f-11e9-8ab4-b6e980803a3b'),
    domainId?: string(name='domain_id', description='domain_id', example='test001', pattern='[a-z0-9A-Z-]+'),
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    filePath?: string(name='file_path', description='file_path', example='/a/b/c.jpg'),
    shareId?: string(name='share_id', description='drive_id', example='test001', pattern='[a-z0-9A-Z]+'),
  }

  /**
   * search file response
   */
  model OSSSearchFileResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    items?: [ BaseOSSFileResponse ](name='items', description='items', example='', items='{"$ref":"#/definitions/BaseOSSFileResponse"}', maxItems=100),
    nextMarker?: string(name='next_marker', description='next_marker', example='NWQ1YmI4MjA0ZGU1ZWNjYzAzODM0ZDVkODlkMWJiMzcyNzM1NTU4OA'),
  }

  /**
   * 更新文件元数据 response
   */
  model OSSUpdateFileMetaResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    contentHash?: string(name='content_hash', description='Content Hash', example='EA4942AA8761213890A5C386F88E6464D2C31CA3'),
    contentHashName?: string(name='content_hash_name', description='content_hash_name', enum='sha1', example='sha1'),
    contentType?: string(name='content_type', description='content_type', example='application/json'),
    crc64Hash?: string(name='crc64_hash', description='crc64_hash'),
    createdAt?: string(name='created_at', description='created_at', example='2019-08-20T06:51:27.292Z'),
    description?: string(name='description', description='description', example='file description'),
    domainId?: string(name='domain_id', description='domain_id', example='test001', pattern='[a-z0-9A-Z]+'),
    downloadUrl?: string(name='download_url', description='download_url', example='https://ccp.data.aliyuncs.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileExtension?: string(name='file_extension', description='file_extension', example='jpg'),
    filePath?: string(name='file_path', description='file_path', example='/a.jpg'),
    name?: string(name='name', description='name', example='ccp.jpg', pattern='[a-zA-Z0-9.-]{1,1024}'),
    parentFilePath?: string(name='parent_file_path', description='parent_file_id', example='/', maxLength=50, minLength=40, pattern='[a-z0-9]{1, 50}'),
    shareId?: string(name='share_id', description='share_id', example='5d5b846942cf94fa72324c14a4bda34e81da635d', pattern='[0-9]+'),
    size?: long(name='size', description='Size', example=1024, format='int64', maximum=53687091200, minimum=0),
    status?: string(name='status', description='status', enum='uploading, available', example='available'),
    thumbnail?: string(name='thumbnail', description='thumbnail', example='https://ccp.data.aliyuncs.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
    trashedAt?: string(name='trashed_at', description='trashed_at', format='date-time'),
    type?: string(name='type', description='type', enum='file, folder', example='file'),
    updatedAt?: string(name='updated_at', description='updated_at', format='date-time'),
    uploadId?: string(name='upload_id', description='upload_id', example='C9DCFE5A82644AC7A02DB74C30C934A6'),
    url?: string(name='url', description='url', example='https://ccp.data.aliyuncs.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
  }

  /**
   * Pre hash check Response
   */
  model PreHashCheckSuccessResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    code?: string(name='code', description='code'),
    fileName?: string(name='file_name', description='file_name'),
    message?: string(name='message', description='message'),
    parentFileId: string(name='parent_file_id', description='parent_file_id', example='5d5b846942cf94fa72324c14a4bda34e81da635d', maxLength=50, minLength=40, pattern='[a-z0-9]{1, 50}'),
    preHash?: string(name='pre_hash', description='pre_hash'),
  }

  /**
   * 
   */
  model RemoveStoreRequest {
    domainId: string(name='domain_id', description='domain ID', example='sz100'),
    storeId: string(name='store_id', description='store ID', example='cdjaksbwuiqbxuiassd'),
  }

  /**
   * 
   */
  model SetStoreCorsRequest {
    corsRule: [ CorsRule ](name='cors_rule', $ref='#/definitions/CorsRule'),
    domainId: string(name='domain_id', description='domain ID', example='sz100'),
    storeId: string(name='store_id', description='store ID', example='cdjaksbwuiqbxuiassd'),
  }

  /**
   * 
   */
  model StoreFile {
    domainId?: string(name='domain_id'),
    name?: string(name='name'),
    parentFilePath?: string(name='parent_file_path'),
    storeId?: string(name='store_id'),
    type?: string(name='type'),
  }

  /**
   * 
   */
  model StoreItemResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    accelerateEndpoint?: string(name='accelerate_endpoint', description='全球加速域名', example='https://oss-cn-shenzhen.aliyuncs.com/'),
    basePath?: string(name='base_path', description='存储公共前缀', example='ccp-data'),
    bucket: string(name='bucket', description='bucket名称', example='data-sz-bucket'),
    customizedEndpoint?: string(name='customized_endpoint', description='用户自定义绑定存储地址', example='https://oss-cn-shenzhen.aliyuncs.com/'),
    domainId?: string(name='domain_id'),
    endpoint: string(name='endpoint', description='存储访问地址', example='https://oss-cn-shenzhen.aliyuncs.com/'),
    internalEndpoint?: string(name='internal_endpoint', description='内网存储地址', example='https://oss-cn-shenzhen.aliyuncs.com/'),
    ownership: string(name='ownership', description='存储归属，system表示系统提供，custom表示使用自己的存储', enum='system, custom', example='system'),
    policy: string(name='policy', description='Policy授权,system类型store会将bucket权限授予当前云账号'),
    roleArn?: string(name='role_arn', description='访问Bucket的角色ARN', example='acs:oss:*:*:*'),
    storeId: string(name='store_id', description='store ID', example='cdjaksbwuiqbxuiassd'),
    type: string(name='type', description='存储类型，当前只支持oss', enum='oss', example='oss'),
  }

  /**
   * 
   */
  model TokenRequest {
    appId: string(name='app_id', description='App ID, 当前访问的App', example='csaklidwasdhjwid'),
    grantType: string(name='grant_type', description='只能填refresh_token', example='refresh_token'),
    refreshToken: string(name='refresh_token', description='refresh token, 登录时返回的', example='ybb3WJy2CwXHoM6hBcydGlvzMoJkFpkk'),
  }

  /**
   * 
   */
  model UpdateAppRequest {
    appId: string(name='app_id', description='App ID', example='CNMrhxwPJHAReExa'),
    appName: string(name='app_name', description='App名称', example='图片分享应用', maxLength=128, minLength=1, pattern='[0-9a-zA-Z]+'),
    description?: string(name='description', description='App描述', example='测试专用', maxLength=128, minLength=0),
    isThirdParty: boolean(name='is_third_party', description='是否是domain私有App', example=false),
    logo: string(name='logo', description='App图标', example='https://app.com/logo.jpg'),
    redirectUri: string(name='redirect_uri', description='App回调地址', example='https://app.com/callback'),
    scope: [ string ](name='scope', description='App权限列表', enum='FILE.ALL, SHARE.ALL, STORAGEFILE.ALL, STORAGE.ALL, DRIVE.ALL, USER.ALL', items='{"type":"string"}'),
    type: string(name='type', default='WebServer', description='App类型', enum='WebServer, WebBrowser, Native', example='WebServer'),
  }

  /**
   * update domain request
   */
  model UpdateDomainRequest {
    authAlipayAppId?: string(name='auth_alipay_app_id', description='支付宝 App Id', example='abc'),
    authAlipayEnbale?: boolean(name='auth_alipay_enbale', description='启用支付宝认证', example=true),
    authAlipayPrivateKey?: string(name='auth_alipay_private_key', description='支付宝 App Secret', example='abc'),
    authConfig?: object(name='auth_config', additionalProperties='{"$ref":"#/definitions/AuthConfig"}'),
    authDingdingAppId?: string(name='auth_dingding_app_id', description='钉钉 App Id', example='abc'),
    authDingdingAppSecret?: string(name='auth_dingding_app_secret', description='钉钉 App Secret', example='abc'),
    authDingdingEnable?: boolean(name='auth_dingding_enable', description='启用钉钉认证', example=true),
    authEndpointEnable?: boolean(name='auth_endpoint_enable'),
    authRamAppId?: string(name='auth_ram_app_id', description='RAM App Id', example='abc'),
    authRamAppSecret?: string(name='auth_ram_app_secret', description='RAM App Secret', example='abc'),
    authRamEnable?: boolean(name='auth_ram_enable', description='启用 RAM 认证', example=true),
    dataHashName?: string(name='data_hash_name', description='数据 Hash 算法', example='sha1'),
    description?: string(name='description', description='Domain 描述', example='my test domain'),
    domainId: string(name='domain_id', description='Domain ID', example='sz111'),
    domainName?: string(name='domain_name', description='Domain 名称', example='test_domain'),
    eventFilenameMatches?: string(name='event_filename_matches', description='事件通知 MNS 匹配文件名', example='abc'),
    eventMnsEndpoint?: string(name='event_mns_endpoint', description='事件通知 MNS Endpoint', example='http://abc.mns.cn-shenzhen.aliyuncs.com'),
    eventMnsTopic?: string(name='event_mns_topic', description='事件通知 MNS Topic', example='abc'),
    eventNames?: [ string ](name='event_names', description='事件名列表', example='abc', items='{"type":"string"}'),
    eventRoleArn?: string(name='event_role_arn', description='事件通知 Role Arn'),
    initDriveEnable?: boolean(name='init_drive_enable', description='开启自动初始化 Drive', example=true),
    initDriveSize?: long(name='init_drive_size', description='自动初始化 Drive 大小', example=1024, format='int64'),
    initDriveStoreId?: string(name='init_drive_store_id', description='自动初始化 Drive 使用 Store ID', example='1'),
    publishedAppAccessStrategy?: [ AppAccessStrategy ](name='published_app_access_strategy', $ref='#/definitions/AppAccessStrategy'),
    sharable?: boolean(name='sharable', description='开启分享', example=true),
  }

  /**
   * Update drive response
   */
  model UpdateDriveResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    creator?: string(name='creator', description='Drive 创建者', example='ccp'),
    description?: string(name='description', description='Drive 备注信息', example='ccp team drive'),
    domainId?: string(name='domain_id', description='Domain ID', example='hz999'),
    driveId?: string(name='drive_id', description='Drive ID', example='123'),
    driveName?: string(name='drive_name', description='Drive 名称', example='ccpdrive'),
    driveType?: string(name='drive_type', description='Drive 类型', example='normal'),
    owner?: string(name='owner', description='Drive 所有者', example='ccp'),
    relativePath?: string(name='relative_path', description='Drive存储基于store的相对路径，domain的PathType为OSSPath时返回', example='/a/b/e/'),
    status?: string(name='status', description='Drive 状态', example='enabled'),
    storeId?: string(name='store_id', description='存储 ID, domain的PathType为OSSPath时返回', example='123'),
    totalSize?: long(name='total_size', description='Drive 空间总量', example=102400, format='int64'),
    usedSize?: long(name='used_size', description='Drive 空间已使用量', example=1024, format='int64'),
  }

  /**
   * Update share response
   */
  model UpdateShareResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    createdAt?: string(name='created_at', description='created_at', example='2006-01-02T15:04:05.999Z'),
    creator?: string(name='creator', description='creator', example='xxx'),
    description?: string(name='description', description='description', example='share description'),
    domainId?: string(name='domain_id', description='domain_id', example='domain-1'),
    driveId?: string(name='drive_id', description='drive_id', example='1'),
    expiration?: string(name='expiration', description='expiration', example='2006-01-02T15:04:05.999Z'),
    expired?: boolean(name='expired', description='expired', example=false),
    owner?: string(name='owner', description='owner', example='xxx'),
    permissions?: [ string ](name='permissions', description='permissions', example='', items='{"type":"string"}'),
    shareFilePath?: string(name='share_file_path', description='share_path', example='/a/b/c/'),
    shareId?: string(name='share_id', description='share_id', example='3d336314-63c8-4d96-bce0-17aefb6833b6'),
    shareName?: string(name='share_name', description='share_name', example='new_share'),
    status?: string(name='status', description='status', example='enabled'),
    updatedAt?: string(name='updated_at', description='updated_at', example='2006-01-02T15:04:05.999Z'),
  }

  /**
   * 
   */
  model UploadPartInfo {
    etag?: string(name='etag', description='etag', example='0CC175B9C0F1B6A831C399E269772661'),
    partNumber?: long(name='part_number', description='PartNumber', example=1, format='int64', maximum=1, minimum=10000, pattern='[0-9]+'),
    partSize?: long(name='part_size', description='PartSize：', example=1024, format='int64', maximum=5368709120, minimum=102400),
    uploadUrl?: string(name='upload_url', description='upload_url', example='https://ccp.data.aliyuncs.com/xxx/xxx?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx&partNumber=1&uploadId=0CC175B9C0F1B6A831C399E269772661'),
  }

  /**
   * 
   */
  model UserAuthentication {
    AuthenticationType: string(name='AuthenticationType', description='认证类型', example='mobile'),
    CreatedAt: long(name='CreatedAt', description='创建时间', example=1556163159820, format='int64'),
    Detail: string(name='Detail', description='详情', example='{name:abc}'),
    DomainID: string(name='DomainID', description='Domain ID', example='5000'),
    Identity: string(name='Identity', description='唯一身份标识', example='15208345000'),
    LastLoginTime: long(name='LastLoginTime', description='最后登录时间', example=1556163159820, format='int64'),
    Status: string(name='Status', description='状态', example='normal'),
    UserID: string(name='UserID', description='用户ID', example='00016a587b62b50003deea299a4f5b50'),
  }

  /**
   * complete file request
   */
  model BaseCompleteFileRequest {
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    partInfoList?: [ UploadPartInfo ](name='part_info_list', description='part_info_list', items='{"$ref":"#/definitions/UploadPartInfo"}'),
    uploadId?: string(name='upload_id', description='upload_id'),
  }

  /**
   * create file request
   */
  model BaseCreateFileRequest {
    contentMd5: string(name='content_md5', description='ContentMd5', example='E10ADC3949BA59ABBE56E057F20F883E'),
    contentType: string(name='content_type', description='ContentType', example='application/json'),
    name: string(name='name', description='Name', example='ccp.jpg', maximum=1024, minimum=1, pattern='[a-z0-9.-_]{1,1024}'),
    partInfoList?: [ UploadPartInfo ](name='part_info_list', description='part_info_list', items='{"$ref":"#/definitions/UploadPartInfo"}'),
    size: long(name='size', description='Size', format='int64', maximum=53687091200, minimum=0),
    type: string(name='type', description='Type', enum='file, folder', example='file'),
  }

  /**
   * 获取文件上传URL
   */
  model BaseGetUploadUrlRequest {
    contentMd5?: string(name='content_md5', description='content_md5', example='E10ADC3949BA59ABBE56E057F20F883E', maxLength=32),
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    partInfoList?: [ UploadPartInfo ](name='part_info_list', description='upload_part_list', example='', items='{"$ref":"#/definitions/UploadPartInfo"}'),
    uploadId: string(name='upload_id', description='upload_id', example='3920F2BE4D9446D6967E2ED505A97EFD'),
  }

  /**
   * list file request
   */
  model BaseListFileRequest {
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    imageThumbnailProcess?: string(name='image_thumbnail_process', description='image_thumbnail_process', example='image/resize,w_200'),
    imageUrlProcess?: string(name='image_url_process', description='image_url_process', example='image/resize,w_200'),
    limit?: long(name='limit', default=50, description='limit', example=10, format='int64', maximum=100, minimum=0, pattern='[0-9]{1, 3}'),
    marker?: string(name='marker', description='marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
  }

  /**
   * 文件移动请求
   */
  model BaseMoveFileRequest {
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    newName?: string(name='new_name', description='new_name', example='ccp.jpg', pattern='[a-zA-Z0-9.-]{1,1024}'),
    overwrite?: boolean(name='overwrite', default=false, description='overwrite
type: boolean', example=false),
  }

  /**
   * 
   */
  model BatchSubRequest {
    body?: object(name='body', additionalProperties='{"type":"object"}', description='body 子请求的请求参数 json 字符串，可参考对于子请求文档, 当指定了body 必须传headers ： "Content-Type" 对应的类型，目前子请求入参是"application/json"', example='{"drive_id":"101","file_id":"xxxxxx"}'),
    headers?: object(name='headers', additionalProperties='{"type":"string"}', description='headers 请求头，表示body传入数据的类型', example='{"Content-Type":"application/json"}'),
    id: string(name='id', description='id 用于request 和 response关联， 不允许重复', example='"1"'),
    method: string(name='method', description='method', enum='POST, GET, PUT, DELETE, HEAD', example='"POST"'),
    url: string(name='url', description='url 子请求的api path路径， 可参考对于子请求文档', example='/file/get'),
  }

  /**
   * 批处理
   */
  model CCPBatchRequest {
    requests: [ BatchSubRequest ](name='requests', description='Requests 请求合集', items='{"$ref":"#/definitions/BatchSubRequest"}'),
    resource: string(name='resource', description='支持的资源类型', example='"file"'),
  }

  /**
   * 合并文件上传任务
   */
  model CCPCompleteFileRequest {
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    partInfoList?: [ UploadPartInfo ](name='part_info_list', description='part_info_list', items='{"$ref":"#/definitions/UploadPartInfo"}'),
    uploadId?: string(name='upload_id', description='upload_id'),
    fileId?: string(name='file_id', description='file_id', example='5d5b846942cf94fa72324c14a4bda34e81da635d', maxLength=50, minLength=40, pattern='[a-z0-9]{1,50}'),
  }

  /**
   * 文件拷贝
   */
  model CCPCopyFileRequest {
    autoRename?: boolean(name='auto_rename', default=false, description='auto_rename
type: boolean', example=false),
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileId: string(name='file_id', description='file_id', example='5d5b846942cf94fa72324c14a4bda34e81da635d', maxLength=50, minLength=40, pattern='[a-z0-9.-_]{1,50}'),
    newName: string(name='new_name', description='new_name', example='ccp.jpg', pattern='[a-zA-Z0-9.-]{1,1024}'),
    toDriveId: string(name='to_drive_id', description='to_drive_id', example='1', pattern='[0-9]+'),
    toParentFileId: string(name='to_parent_file_id', description='to_parent_file_id', example='root', maxLength=50, minLength=40, pattern='[a-z0-9.-_]{1,50}'),
  }

  /**
   * 创建文件
   */
  model CCPCreateFileRequest {
    contentMd5?: string(name='content_md5', description='ContentMd5', example='E10ADC3949BA59ABBE56E057F20F883E'),
    contentType?: string(name='content_type', description='ContentType', example='application/json'),
    name?: string(name='name', description='Name', example='ccp.jpg', maximum=1024, minimum=1, pattern='[a-z0-9.-_]{1,1024}'),
    partInfoList?: [ UploadPartInfo ](name='part_info_list', description='part_info_list', items='{"$ref":"#/definitions/UploadPartInfo"}'),
    size?: long(name='size', description='Size', format='int64', maximum=53687091200, minimum=0),
    type?: string(name='type', description='Type', enum='file, folder', example='file'),
    autoRename?: boolean(name='auto_rename', default=false, description='auto_rename', enum='false, true'),
    contentHash?: string(name='content_hash', description='content_hash', example='7C4A8D09CA3762AF61E59520943DC26494F8941B'),
    contentHashName?: string(name='content_hash_name', description='content_hash_name', enum='sha1', example='sha1'),
    description?: string(name='description', description='description', example='file description', maxLength=0, minLength=1024),
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileId?: string(name='file_id', description='file_id'),
    hidden?: boolean(name='hidden', description='hidden', enum='true, false', example=false),
    labels?: [ string ](name='labels', description='labels', example='label1, label2', items='{"type":"string"}'),
    meta?: string(name='meta', description='meta', example='meta test'),
    parentFileId?: string(name='parent_file_id', description='parent_file_id', example='root', maxLength=50, minLength=40, pattern='[a-z0-9]{1,50}'),
    preHash?: string(name='pre_hash', description='pre_hash', example='E10ADC3949BA59ABBE56E057F20F883E'),
  }

  /**
   * 删除文件请求
   */
  model CCPDeleteFileRequest {
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileId: string(name='file_id', description='file_id', example='5d792010669a1dd91087479e8071c9ae212065cc', maxLength=50, minLength=40, pattern='[a-z0-9.-_]{1,50}'),
    permanently?: boolean(name='permanently', default=false, description='permanently
type: false', example=false),
  }

  /**
   * 批量删除文件请求
   */
  model CCPDeleteFilesRequest {
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileIdList: [ string ](name='file_id_list', description='file_id_list', example='', items='{"type":"string"}', maxItems=100),
  }

  /**
   * 获取异步人去信息
   */
  model CCPGetAsyncTaskRequest {
    asyncTaskId?: string(name='async_task_id', description='async_task_id
type:string', example='000e89fb-cf8f-11e9-8ab4-b6e980803a3b'),
  }

  /**
   * 获取文件下载地址的请求body
   */
  model CCPGetDownloadUrlRequest {
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    expireSec?: long(name='expire_sec', default=900, description='expire_sec', example=15, format='int64', maximum=14400, minimum=0),
    fileId: string(name='file_id', description='file_id', maxLength=50, minLength=40, pattern='[a-z0-9.-_]{1,50}'),
    fileName: string(name='file_name', description='file_name', example='ccp.jpg', pattern='[a-zA-Z0-9.-]{1,1024}'),
  }

  /**
   * 获取文件元数据
   */
  model CCPGetFileRequest {
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileId: string(name='file_id', description='file_id', example='5d5b846942cf94fa72324c14a4bda34e81da635d', maxLength=50, minLength=40, pattern='[a-z0-9.-_]{1,50}'),
    imageThumbnailProcess?: string(name='image_thumbnail_process', description='image_thumbnail_process
type:string', example='image/resize,w_200'),
    imageUrlProcess?: string(name='image_url_process', description='image_thumbnail_process
type:string', example='image/crop,w_100,h_100/rounded-corners,r_10/format,png'),
  }

  /**
   * 获取文件上传URL
   */
  model CCPGetUploadUrlRequest {
    contentMd5?: string(name='content_md5', description='content_md5', example='E10ADC3949BA59ABBE56E057F20F883E', maxLength=32),
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    partInfoList?: [ UploadPartInfo ](name='part_info_list', description='upload_part_list', example='', items='{"$ref":"#/definitions/UploadPartInfo"}'),
    uploadId?: string(name='upload_id', description='upload_id', example='3920F2BE4D9446D6967E2ED505A97EFD'),
    fileId?: string(name='file_id', description='file_id', example='5d5b846942cf94fa72324c14a4bda34e81da635d', maxLength=50, minLength=40, pattern='[a-z0-9]{1,50}'),
  }

  /**
   * 列举文件
   */
  model CCPListFileRequest {
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    imageThumbnailProcess?: string(name='image_thumbnail_process', description='image_thumbnail_process', example='image/resize,w_200'),
    imageUrlProcess?: string(name='image_url_process', description='image_url_process', example='image/resize,w_200'),
    limit?: long(name='limit', default=50, description='limit', example=10, format='int64', maximum=100, minimum=0, pattern='[0-9]{1, 3}'),
    marker?: string(name='marker', description='marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
    Starred?: boolean(name='Starred', description='starred', enum='false, true', example=false),
    category?: string(name='category', description='category', enum='image, video, music, doc, other', example='image'),
    customIndexKey?: string(name='custom_index_key', description='custom_index_key'),
    orderDirection?: string(name='order_direction', description='order_direction', enum='ASC, DESC', example='ASC'),
    status?: string(name='status', default='available', description='status', enum='uploading, available', example='available'),
    type?: string(name='type', description='type', enum='file, folder', example='file'),
    all?: boolean(name='all', default=true, description='all', enum='false, true', example=false),
    orderBy?: string(name='order_by', description='order_by', enum='update_time, name', example='name'),
    parentFileId?: string(name='parent_file_id', description='ParentFileID', example='root', maxLength=50, minLength=40, pattern='[a-z0-9.-_]{1,50}'),
  }

  /**
   * 列举uploadID对应的已上传分片
   */
  model CCPListUploadedPartRequest {
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileId: string(name='file_id', description='file_id', example='5d5b846942cf94fa72324c14a4bda34e81da635d', maxLength=50, minLength=40, pattern='[a-z0-9.-_]{1,50}'),
    limit: long(name='limit', default=1000, description='limit', example=1, format='int64', maximum=1000, minimum=1, pattern='[0-9]+'),
    partNumberMarker?: long(name='part_number_marker', description='part_number_marker', example=1, format='int64', minimum=1, pattern='[0-9]+'),
    uploadId?: string(name='upload_id', description='upload_id', example='00668396C0814D818D90F0A92B04B355'),
  }

  /**
   * 文件移动请求
   */
  model CCPMoveFileRequest {
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    newName?: string(name='new_name', description='new_name', example='ccp.jpg', pattern='[a-zA-Z0-9.-]{1,1024}'),
    overwrite?: boolean(name='overwrite', default=false, description='overwrite
type: boolean', example=false),
    fileId?: string(name='file_id', description='file_id', example='5d5b846942cf94fa72324c14a4bda34e81da635d', maxLength=50, minLength=40, pattern='[a-z0-9.-_]{1,50}'),
    toParentFileId?: string(name='to_parent_file_id', description='to_parent_file_id', example='root', maxLength=50, minLength=40),
  }

  /**
   * 搜索文件元数据
   */
  model CCPSearchFileRequest {
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    imageThumbnailProcess?: string(name='image_thumbnail_process', description='image_thumbnail_process', example='image/resize,m_fill,h_128,w_128,limit_0'),
    imageUrlProcess?: string(name='image_url_process', description='image_url_process', example='image/resize,m_fill,h_128,w_128,limit_0'),
    limit?: integer(name='limit', default=50, description='limit', example=10, format='int32', maximum=100, minimum=1),
    marker?: string(name='marker', description='Marker', example='""'),
    orderBy?: string(name='order_by', default='updated_at', description='order_by', enum='name, created_at, updated_at, size', example='size'),
    query?: string(name='query', description='query', example='not name=123', maxLength=4096),
  }

  /**
   * 更新文件元数据
   */
  model CCPUpdateFileMetaRequest {
    customIndexKey?: string(name='custom_index_key'),
    description?: string(name='description', description='description
type: string', example='description', maxLength=1024),
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileId: string(name='file_id', description='file_id', example='5d5b846942cf94fa72324c14a4bda34e81da635d', maxLength=50, minLength=40, pattern='[a-z0-9.-_]{1,50}'),
    hidden?: boolean(name='hidden', default=false, description='hidden
type: boolean', example=false),
    labels?: [ string ](name='labels', description='labels', example='label1, label2', items='{"type":"string"}'),
    meta?: string(name='meta', description='meta', example='meta test'),
    name: string(name='name', description='name', example='ccp.jpg', pattern='[a-zA-Z0-9.-]{1,1024}'),
    starred?: boolean(name='starred', default=false, description='starred
type: boolean', example=false),
  }

  /**
   * complete file request
   */
  model CompleteFileRequest {
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileId: string(name='file_id', description='file_id', maxLength=50, minLength=40, pattern='[a-z0-9]{1,50}'),
    filePath?: string(name='file_path'),
    partInfoList?: [ UploadPartInfo ](name='part_info_list', description='part_info_list', items='{"$ref":"#/definitions/UploadPartInfo"}'),
    shareId?: string(name='share_id'),
    uploadId: string(name='upload_id', description='upload_id'),
  }

  /**
   * 文件移动请求
   */
  model CopyFileRequest {
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileId: string(name='file_id', description='file_id', maxLength=50, minLength=40, pattern='[a-z0-9.-_]{1,50}'),
    filePath?: string(name='file_path'),
    newName: string(name='new_name', description='new_name', example='ccp.jpg', pattern='[a-zA-Z0-9.-]{1,1024}'),
    overwrite?: boolean(name='overwrite', default=false, description='overwrite
type: boolean'),
    shareId?: string(name='share_id'),
    toParentFileId: string(name='to_parent_file_id', description='to_parent_file_id', maxLength=50, minLength=40, pattern='[a-z0-9.-_]{1,50}'),
    toParentFilePath?: string(name='to_parent_file_path'),
  }

  /**
   * create drive request
   */
  model CreateDriveRequest {
    default?: boolean(name='default', default=false, description='是否默认drive, 只允许设置一个默认drive', example=true),
    description?: string(name='description', description='描述信息', example='ccp team drive', maximum=1024),
    driveName: string(name='drive_name', description='Drive 名称', example='ccpdrive', maximum=1024),
    driveType?: string(name='drive_type', default='normal', description='Drive类型', enum='normal, large', example='normal'),
    owner: string(name='owner', description='所属者', example='ccp-001'),
    relativePath?: string(name='relative_path', description='domain的PathType为OSSPath时必选。 Drive存储基于store的相对路径', example='/d/e/f/'),
    status?: string(name='status', default='enabled', description='状态', enum='disabled, enabled', example='enabled'),
    storeId?: string(name='store_id', description='StoreID , domain的PathType为OSSPath时必选', example='store_id'),
    totalSize?: long(name='total_size', default=-1, description='总大小,单位Byte [如果设置 -1 代表不限制]', example=1024, format='int64'),
  }

  /**
   * create file request
   */
  model CreateFileRequest {
    contentHash?: string(name='content_hash', description='ContentHash'),
    contentHashName?: string(name='content_hash_name', description='ContentHashName', enum='sha1', example='sha1'),
    contentMd5?: string(name='content_md5', description='ContentMd5', maxLength=32),
    contentType: string(name='content_type', description='ContentType'),
    description?: string(name='description', description='Description', maxLength=0, minLength=1024),
    driveId: string(name='drive_id', description='DriveID', example='1', pattern='[0-9]+'),
    hidden?: boolean(name='hidden', description='Hidden', enum='true, false'),
    meta?: string(name='meta', description='Meta'),
    name: string(name='name', description='name', example='ccp.jpg', pattern='[a-zA-Z0-9.-]{1,1024}'),
    parentFileId: string(name='parent_file_id', description='parent_file_id', maxLength=50, minLength=40, pattern='[a-z0-9]{1,50}'),
    parentFilePath?: string(name='parent_file_path', description='ParentFilePath'),
    partInfoList?: [ UploadPartInfo ](name='part_info_list', description='part_info_list', items='{"$ref":"#/definitions/UploadPartInfo"}'),
    preHash?: string(name='pre_hash', description='pre_hash'),
    shareId?: string(name='share_id', description='ShareID'),
    size: long(name='size', description='Size', format='int64', maximum=53687091200, minimum=0),
    tags?: object(name='tags', additionalProperties='{"type":"object"}', description='tags'),
    type: string(name='type', description='Type', enum='file, folder'),
  }

  /**
   * create share request
   */
  model CreateShareRequest {
    description?: string(name='description', description='description', example='share description'),
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    expiration?: string(name='expiration', description='expiration', example='2006-01-02T15:04:05.999Z'),
    owner: string(name='owner', description='creator', example='abc'),
    permissions?: [ string ](name='permissions', description='permissions', example='', items='{"type":"string"}'),
    shareFilePath: string(name='share_file_path', description='share_file_path'),
    shareName?: string(name='share_name', description='share_name', example='share'),
    status?: string(name='status', description='status', enum='enabled, disabled', example='enabled'),
  }

  /**
   * Delete drive request
   */
  model DeleteDriveRequest {
    driveId: string(name='drive_id', description='Drive ID', example='123'),
  }

  /**
   * 删除文件请求
   */
  model DeleteFileRequest {
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileId: string(name='file_id', description='file_id', maxLength=50, minLength=40, pattern='[a-z0-9.-_]{1,50}'),
    filePath?: string(name='file_path'),
    permanently?: boolean(name='permanently'),
    shareId?: string(name='share_id'),
  }

  /**
   * delete share request
   */
  model DeleteShareRequest {
    shareId: string(name='share_id', description='share_id', example='3d336314-63c8-4d96-bce0-17aefb6833b6'),
  }

  /**
   * 下载文件请求body
   */
  model DownloadRequest {
    DriveID: string(name='DriveID', description='drive_id', example='1', pattern='[0-9]+'),
    FileID: string(name='FileID', description='file_id', maxLength=50, minLength=40, pattern='[a-z0-9.-_]{1,50}'),
    ImageProcess?: string(name='ImageProcess', description='image_process', example='image/resize,w_200'),
    ShareID?: string(name='ShareID'),
  }

  /**
   * 获取异步人去信息
   */
  model GetAsyncTaskRequest {
    asyncTaskId?: string(name='async_task_id', description='async_task_id
type:string', example='000e89fb-cf8f-11e9-8ab4-b6e980803a3b'),
  }

  /**
   * Get default drive request
   */
  model GetDefaultDriveRequest {
    userId?: string(name='user_id', description='用户ID', example='abc'),
  }

  /**
   * 获取文件下载地址的请求body
   */
  model GetDownloadUrlRequest {
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    expireSec?: long(name='expire_sec', default=900, description='expire_sec', example=15, format='int64', maximum=14400, minimum=0),
    fileId: string(name='file_id', description='file_id', maxLength=50, minLength=40, pattern='[a-z0-9.-_]{1,50}'),
    fileName: string(name='file_name', description='file_name', example='ccp.jpg', pattern='[a-zA-Z0-9.-]{1,1024}'),
    filePath?: string(name='file_path'),
    shareId?: string(name='share_id'),
  }

  /**
   * Get drive request
   */
  model GetDriveRequest {
    driveId: string(name='drive_id', description='Drive ID', example='123'),
  }

  /**
   * 获取文件元数据
   */
  model GetFileRequest {
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileId: string(name='file_id', description='file_id', maxLength=50, minLength=40, pattern='[a-z0-9.-_]{1,50}'),
    filePath?: string(name='file_path'),
    imageThumbnailProcess?: string(name='image_thumbnail_process', description='image_thumbnail_process
type:string', example='image/resize,w_200'),
    imageUrlProcess?: string(name='image_url_process', description='image_thumbnail_process
type:string', example='image/resize,w_200'),
    shareId?: string(name='share_id'),
  }

  /**
   * get share request
   */
  model GetShareRequest {
    shareId?: string(name='share_id', description='share_id', example='3d336314-63c8-4d96-bce0-17aefb6833b6'),
  }

  /**
   * 获取文件上传URL
   */
  model GetUploadUrlRequest {
    contentMd5?: string(name='content_md5', description='content_md5', maxLength=32),
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileId: string(name='file_id', description='file_id', maxLength=50, minLength=40, pattern='[a-z0-9]{1,50}'),
    filePath?: string(name='file_path'),
    partInfoList?: [ UploadPartInfo ](name='part_info_list', description='upload_part_list', items='{"$ref":"#/definitions/UploadPartInfo"}'),
    shareId?: string(name='share_id'),
    uploadId: string(name='upload_id', description='upload_id'),
  }

  /**
   * List drive request
   */
  model ListDriveRequest {
    limit?: integer(name='limit', default=100, description='每页大小限制', example=10, format='int32', maximum=100, minimum=1),
    marker?: string(name='marker', description='翻页标记, 接口返回的标记值', example='marker'),
    owner?: string(name='owner', description='所属者', example='abc'),
  }

  /**
   * list file request
   */
  model ListFileRequest {
    all?: boolean(name='all', description='all', enum='false,  true'),
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    imageThumbnailProcess?: string(name='image_thumbnail_process', description='image_thumbnail_process'),
    imageUrlProcess?: string(name='image_url_process', description='image_url_process'),
    limit?: long(name='limit', default=50, description='limit', format='int64', maximum=100, minimum=0, pattern='[0-9]{1, 3}'),
    marker?: string(name='marker', description='marker'),
    parentFileId: string(name='parent_file_id', description='ParentFileID', maxLength=50, minLength=40, pattern='[a-z0-9.-_]{1,50}'),
    parentFilePath?: string(name='parent_file_path'),
    shareId?: string(name='share_id'),
    status?: string(name='status', description='status', enum='uploading,  available'),
  }

  /**
   * List my drive request
   */
  model ListMyDriveRequest {
    limit?: integer(name='limit', default=100, description='每页大小限制', example=10, format='int32', maximum=100, minimum=1),
    marker?: string(name='marker', description='翻页标记, 接口返回的标记值', example='marker'),
  }

  /**
   * list share request
   */
  model ListShareRequest {
    creator: string(name='creator', description='creator', example='abc'),
    limit: integer(name='limit', description='limit', example=50, format='int32', maximum=100, minimum=1),
    marker?: string(name='marker', description='marker'),
    owner: string(name='owner', description='creator', example='edf'),
  }

  /**
   * list store file
   */
  model ListStoreFileRequest {
    limit?: long(name='limit', default=100, description='limit', example=50, format='int64', maximum=1000, minimum=1),
    marker?: string(name='marker', description='marker'),
    parentFilePath?: string(name='parent_file_path', description='parent_file_path'),
    storeId?: string(name='store_id', description='store_id', example='xxx'),
    type?: string(name='type', description='type', enum='file, folder', example='file'),
  }

  /**
   * list storage file
   */
  model ListStoreRequest {
    domainId?: string(name='domain_id', description='domain_id', example='10'),
  }

  /**
   * complete file request
   */
  model OSSCompleteFileRequest {
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    partInfoList?: [ UploadPartInfo ](name='part_info_list', description='part_info_list', items='{"$ref":"#/definitions/UploadPartInfo"}'),
    uploadId?: string(name='upload_id', description='upload_id'),
    filePath?: string(name='file_path'),
    shareId?: string(name='share_id'),
  }

  /**
   * copy file request
   */
  model OSSCopyFileRequest {
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    filePath?: string(name='file_path', description='file_path', example='/a/b/c.jpg'),
    newName: string(name='new_name', description='new_name', example='ccp.jpg', pattern='[a-zA-Z0-9.-]{1,1024}'),
    overwrite?: boolean(name='overwrite', default=false, description='overwrite
type: boolean'),
    shareId?: string(name='share_id', description='share_id', example='3d336314-63c8-4d96-bce0-17aefb6833b6', pattern='[0-9a-zA-z-]+'),
    toDriveId: string(name='to_drive_id', description='to_drive_id', example='1', pattern='[0-9]+'),
    toParentFilePath: string(name='to_parent_file_path', description='to_parent_file_path', example='/a/b/c/'),
    toShareId?: string(name='to_share_id', description='share_id', example='3d336314-63c8-4d96-bce0-17aefb6833b6'),
  }

  /**
   * create file request
   */
  model OSSCreateFileRequest {
    contentMd5?: string(name='content_md5', description='ContentMd5', example='E10ADC3949BA59ABBE56E057F20F883E'),
    contentType?: string(name='content_type', description='ContentType', example='application/json'),
    name?: string(name='name', description='Name', example='ccp.jpg', maximum=1024, minimum=1, pattern='[a-z0-9.-_]{1,1024}'),
    partInfoList?: [ UploadPartInfo ](name='part_info_list', description='part_info_list', items='{"$ref":"#/definitions/UploadPartInfo"}'),
    size?: long(name='size', description='Size', format='int64', maximum=53687091200, minimum=0),
    type?: string(name='type', description='Type', enum='file, folder', example='file'),
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    parentFilePath?: string(name='parent_file_path', description='parent_file_path'),
    shareId?: string(name='share_id', description='share_id', maxLength=40, minLength=50),
  }

  /**
   * 删除文件请求
   */
  model OSSDeleteFileRequest {
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    filePath: string(name='file_path', description='file_path', maxLength=50, minLength=40, pattern='[a-z0-9.-_]{1,50}'),
    permanently?: boolean(name='permanently', description='permanently
type: false', example=false),
    shareId?: string(name='share_id', description='share_id', example='3d336314-63c8-4d96-bce0-17aefb6833b6', pattern='[0-9a-zA-z-]+'),
  }

  /**
   * 获取文件下载地址的请求body
   */
  model OSSGetDownloadUrlRequest {
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    expireSec?: long(name='expire_sec', default=900, description='expire_sec', example=15, format='int64', maximum=14400, minimum=0),
    fileName: string(name='file_name', description='file_name', example='ccp.jpg', pattern='[a-zA-Z0-9.-]{1,1024}'),
    filePath: string(name='file_path', description='file_path', example='/a/b/c.jpg', maxLength=50, minLength=40, pattern='[a-z0-9.-_]{1,50}'),
    shareId: string(name='share_id', description='share_id', example='3d336314-63c8-4d96-bce0-17aefb6833b6', pattern='[0-9a-z-]+'),
  }

  /**
   * 获取文件元数据
   */
  model OSSGetFileRequest {
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    filePath: string(name='file_path', description='file_id', maxLength=50, minLength=40, pattern='[a-z0-9.-_]{1,50}'),
    imageThumbnailProcess?: string(name='image_thumbnail_process', description='image_thumbnail_process
type:string', example='image/resize,w_200'),
    imageUrlProcess?: string(name='image_url_process', description='image_thumbnail_process
type:string', example='image/resize,w_200'),
    shareId?: string(name='share_id', description='share_id', example='3d336314-63c8-4d96-bce0-17aefb6833b6', pattern='[0-9a-zA-z-]+'),
  }

  /**
   * 获取文件上传URL
   */
  model OSSGetUploadUrlRequest {
    contentMd5?: string(name='content_md5', description='content_md5', example='E10ADC3949BA59ABBE56E057F20F883E', maxLength=32),
    driveId?: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    partInfoList?: [ UploadPartInfo ](name='part_info_list', description='upload_part_list', example='', items='{"$ref":"#/definitions/UploadPartInfo"}'),
    uploadId?: string(name='upload_id', description='upload_id', example='3920F2BE4D9446D6967E2ED505A97EFD'),
    filePath?: string(name='file_path', description='file_path', example='/a/b/c.jpg'),
    shareId?: string(name='share_id', description='share_id', example='1', pattern='[0-9]+'),
  }

  /**
   * list file request
   */
  model OSSListFileRequest {
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    imageThumbnailProcess?: string(name='image_thumbnail_process', description='image_thumbnail_process', example='image/resize,w_200'),
    imageUrlProcess?: string(name='image_url_process', description='image_url_process', example='image/resize,w_200'),
    limit?: long(name='limit', default=50, description='limit', example=10, format='int64', maximum=100, minimum=0, pattern='[0-9]{1, 3}'),
    marker?: string(name='marker', description='marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
    parentFilePath: string(name='parent_file_path', description='ParentFilePath', example='/a/b/c.jpg'),
    shareId: string(name='share_id', description='drive_id', example='1', pattern='[0-9]+'),
  }

  /**
   * 列举uploadID对应的已上传分片
   */
  model OSSListUploadedPartRequest {
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    filePath: string(name='file_path', description='file_path', example='/a/b/c.jpg'),
    limit: long(name='limit', default=1000, description='limit', example=1, format='int64', maximum=1000, minimum=1, pattern='[0-9]+'),
    partNumberMarker?: long(name='part_number_marker', description='part_number_marker', example=1, format='int64', minimum=1, pattern='[0-9]+'),
    shareId?: string(name='share_id', description='share_id', example='3d336314-63c8-4d96-bce0-17aefb6833b6', pattern='[0-9a-zA-z-]+'),
    uploadId?: string(name='upload_id', description='upload_id', example='00668396C0814D818D90F0A92B04B355'),
  }

  /**
   * 文件移动请求
   */
  model OSSMoveFileRequest {
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    filePath?: string(name='file_path', description='file_path', example='/a/b/c.jpg'),
    newName: string(name='new_name', description='new_name', example='ccp.jpg', pattern='[a-zA-Z0-9.-]{1,1024}'),
    overwrite?: boolean(name='overwrite', default=false, description='overwrite
type: boolean'),
    shareId?: string(name='share_id', description='share_id', example='3d336314-63c8-4d96-bce0-17aefb6833b6', pattern='[0-9a-zA-z-]+'),
    toParentFilePath?: string(name='to_parent_file_path', description='file_path', example='/a/b/c/'),
  }

  /**
   * UCGetObjectInfoByObjectKeyRequest
   */
  model UCGetObjectInfoByObjectKeyRequest {
    objectKey?: string(name='object_key'),
  }

  /**
   * UCGetObjectInfoBySha1Request
   */
  model UCGetObjectInfoBySha1Request {
    sha1?: string(name='sha1'),
  }

  /**
   * Update drive request
   */
  model UpdateDriveRequest {
    description?: string(name='description', description='描述信息', example='ccp team drive', maximum=1024),
    driveId: string(name='drive_id', description='Drive ID', example='123'),
    driveName: string(name='drive_name', description='Drive 名称', example='ccpdrive', maximum=1024),
    status?: string(name='status', default='enabled', description='状态', enum='disabled, enabled', example='enabled'),
    totalSize?: long(name='total_size', default=0, description='总大小,单位Byte [如果设置 -1 代表不限制]', example=1024, format='int64'),
  }

  /**
   * 更新文件元数据
   */
  model UpdateFileMetaRequest {
    description?: string(name='description', description='description
type: string', maxLength=1000),
    driveId: string(name='drive_id', description='drive_id', example='1', pattern='[0-9]+'),
    fileId: string(name='file_id', description='file_id', maxLength=50, minLength=40, pattern='[a-z0-9.-_]{1,50}'),
    hidden?: boolean(name='hidden', default=false, description='hidden
type: boolean'),
    meta?: string(name='meta', description='meta'),
    name: string(name='name', description='name', example='ccp.jpg', pattern='[a-zA-Z0-9.-]{1,1024}'),
    shareId?: string(name='share_id'),
    starred?: boolean(name='starred', default=false, description='starred
type: boolean'),
    tags?: object(name='tags', additionalProperties='{"type":"object"}', description='tags'),
  }

  /**
   * update share request
   */
  model UpdateShareRequest {
    description?: string(name='description', description='description', example='share description', maxLength=1024),
    expiration?: string(name='expiration', description='expiration', example='2006-01-02T15:04:05.999Z'),
    permissions?: [ string ](name='permissions', description='permissions', example='', items='{"type":"string"}'),
    shareId: string(name='share_id', description='share_id', example='3d336314-63c8-4d96-bce0-17aefb6833b6'),
    shareName?: string(name='share_name', description='share_name', example='new_share_name'),
    status?: string(name='status', description='status', enum='enabled, disabled', example='enabled'),
  }

  /**
   * Base user response
   */
  model BaseUserResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    avatar?: string(name='avatar', description='头像', example='http://a.b.c/ccp.jpg'),
    createdAt?: long(name='created_at', description='用户创建时间', example=1567407718386, format='int64'),
    defaultDriveId?: string(name='default_drive_id', description='默认 Drive ID', example='123'),
    description?: string(name='description', description='用户备注信息', example='ccp team user'),
    domainId?: string(name='domain_id', description='Domain ID', example='hz999'),
    email?: string(name='email', description='邮箱', example='123@ccp.com'),
    nickName?: string(name='nick_name', description='昵称', example='abc'),
    phone?: string(name='phone', description='电话', example='13700000000'),
    role?: string(name='role', description='角色', example='user'),
    status?: string(name='status', description='用户状态', example='enabled'),
    updatedAt?: long(name='updated_at', description='用户修改时间', example=1567407718386, format='int64'),
    userId?: string(name='user_id', description='用户 ID', example='ccpuserid'),
    userName?: string(name='user_name', description='用户名称', example='name'),
  }

  /**
   * Create user request
   */
  model CreateUserRequest {
    avatar?: string(name='avatar', description='头像', example='http://a.b.c/ccp.jpg'),
    description?: string(name='description', description='描述信息', example='ccp team user', maximum=1024),
    email?: string(name='email', description='邮箱', example='123@ccp.com'),
    nickName?: string(name='nick_name', description='昵称', example='ccpuser'),
    phone?: string(name='phone', description='电话号码', example='13700000000'),
    role?: string(name='role', default='user', description='角色', enum='superadmin,  admin,  user', example='user'),
    status?: string(name='status', default='enabled', description='状态', enum='enabled,  disabled', example='enabled'),
    userId: string(name='user_id', description='用户 ID', example='ccpuserid'),
    userName?: string(name='user_name', description='用户名称', example='abc'),
  }

  /**
   * Create user response
   */
  model CreateUserResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    avatar?: string(name='avatar', description='头像', example='http://a.b.c/ccp.jpg'),
    createdAt?: long(name='created_at', description='用户创建时间', example=1567407718386, format='int64'),
    defaultDriveId?: string(name='default_drive_id', description='默认 Drive ID', example='123'),
    description?: string(name='description', description='用户备注信息', example='ccp team user'),
    domainId?: string(name='domain_id', description='Domain ID', example='hz999'),
    email?: string(name='email', description='邮箱', example='123@ccp.com'),
    nickName?: string(name='nick_name', description='昵称', example='abc'),
    phone?: string(name='phone', description='电话', example='13700000000'),
    role?: string(name='role', description='角色', example='user'),
    status?: string(name='status', description='用户状态', example='enabled'),
    updatedAt?: long(name='updated_at', description='用户修改时间', example=1567407718386, format='int64'),
    userId?: string(name='user_id', description='用户 ID', example='ccpuserid'),
    userName?: string(name='user_name', description='用户名称', example='name'),
  }

  /**
   * Delete user request
   */
  model DeleteUserRequest {
    userId: string(name='user_id', description='用户 ID', example='ccpuserid'),
  }

  /**
   * Delete user response
   */
  model DeleteUserResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
  }

  /**
   * Get user request
   */
  model GetUserRequest {
    userId?: string(name='user_id', description='用户 ID, 使用ak方式访问，该项必传, access_token访问如果不传，默认取自己的user信息
example'),
  }

  /**
   * Get user response
   */
  model GetUserResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    avatar?: string(name='avatar', description='头像', example='http://a.b.c/ccp.jpg'),
    createdAt?: long(name='created_at', description='用户创建时间', example=1567407718386, format='int64'),
    defaultDriveId?: string(name='default_drive_id', description='默认 Drive ID', example='123'),
    description?: string(name='description', description='用户备注信息', example='ccp team user'),
    domainId?: string(name='domain_id', description='Domain ID', example='hz999'),
    email?: string(name='email', description='邮箱', example='123@ccp.com'),
    nickName?: string(name='nick_name', description='昵称', example='abc'),
    phone?: string(name='phone', description='电话', example='13700000000'),
    role?: string(name='role', description='角色', example='user'),
    status?: string(name='status', description='用户状态', example='enabled'),
    updatedAt?: long(name='updated_at', description='用户修改时间', example=1567407718386, format='int64'),
    userId?: string(name='user_id', description='用户 ID', example='ccpuserid'),
    userName?: string(name='user_name', description='用户名称', example='name'),
  }

  /**
   * List user request
   */
  model ListUserRequest {
    limit?: integer(name='limit', default=100, description='每页大小限制', example=10, format='int32', maximum=100, minimum=1),
    marker?: string(name='marker', description='翻页标记', example='marker'),
  }

  /**
   * List user response
   */
  model ListUserResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    items?: [ BaseUserResponse ](name='items', items='{"$ref":"#/definitions/BaseUserResponse"}'),
    nextMarker?: string(name='next_marker', description='翻页标记', example='nextmarker'),
  }

  /**
   * Search user request
   */
  model SearchUserRequest {
    email?: string(name='email', description='邮箱', example='abc@ccp.com'),
    limit?: integer(name='limit', default=100, description='每页大小限制', example=10, format='int32', maximum=100, minimum=1),
    marker?: string(name='marker', description='翻页标记', example='marker'),
    nickName?: string(name='nick_name', description='昵称', example='la'),
    phone?: string(name='phone', description='电话号码', example='13700000000'),
    role?: string(name='role', default='user', description='角色', enum='superadmin,  admin,  user', example='user'),
    status?: string(name='status', default='enabled', description='状态', enum='enabled,  disabled', example='enabled'),
    userName?: string(name='user_name', description='用户名', example='abc'),
  }

  /**
   * Update user request
   */
  model UpdateUserRequest {
    avatar?: string(name='avatar', description='头像', example='http://a.b.c/ccp.jpg'),
    description?: string(name='description', description='描述信息', example='ccp team user', maximum=1024),
    email?: string(name='email', description='邮箱', example='123@ccp.com'),
    nickName?: string(name='nick_name', description='昵称', example='ccpuser'),
    phone?: string(name='phone', description='电话号码', example='13700000000'),
    role?: string(name='role', default='user', description='角色', enum='superadmin,  admin,  user', example='user'),
    status?: string(name='status', default='enabled', description='状态', enum='enabled,  disabled', example='enabled'),
    userId: string(name='user_id', description='用户 ID', example='ccpuserid'),
  }

  /**
   * Update user response
   */
  model UpdateUserResponse {
    requestId?: string(name='requestId', description='request Id', example='0BA8CF68-9769E-4469-A14B-8772004287E2'),
    avatar?: string(name='avatar', description='头像', example='http://a.b.c/ccp.jpg'),
    createdAt?: long(name='created_at', description='用户创建时间', example=1567407718386, format='int64'),
    defaultDriveId?: string(name='default_drive_id', description='默认 Drive ID', example='123'),
    description?: string(name='description', description='用户备注信息', example='ccp team user'),
    domainId?: string(name='domain_id', description='Domain ID', example='hz999'),
    email?: string(name='email', description='邮箱', example='123@ccp.com'),
    nickName?: string(name='nick_name', description='昵称', example='abc'),
    phone?: string(name='phone', description='电话', example='13700000000'),
    role?: string(name='role', description='角色', example='user'),
    status?: string(name='status', description='用户状态', example='enabled'),
    updatedAt?: long(name='updated_at', description='用户修改时间', example=1567407718386, format='int64'),
    userId?: string(name='user_id', description='用户 ID', example='ccpuserid'),
    userName?: string(name='user_name', description='用户名称', example='name'),
  }

  /**
   * 取消绑定关系，生成新用户，返回访问令牌
   * @tags account
   * @error InvalidParameterMissing The input parameter {parameter_name} is missing.
   * @error Forbidden User not authorized to operate on the specified APIs.
   * @error InternalError The request has been failed due to some unknown error.
   */
  api cancelLink(request: CancelLinkRequest, runtime: RuntimeOptions): AccountAccessTokenResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/account/cancel_link`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.auth.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 确认绑定关系, 成功后返回访问令牌
   * @tags account
   * @error InvalidParameterMissing The input parameter {parameter_name} is missing.
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error InternalError The request has been failed due to some unknown error.
   */
  api confirmLink(request: ConfirmLinkRequest, runtime: RuntimeOptions): AccountAccessTokenResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/account/confirm_link`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.auth.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 修改手机登录密码，密码必须包含数字和字母，长度8-32个字符
   * @tags account
   * @error InvalidParameterMissing The input parameter {parameter_name} is missing.
   * @error Forbidden User not authorized to operate on the specified APIs.
   * @error InternalError The request has been failed due to some unknown error.
   */
  api changePassword(request: DefaultChangePasswordRequest, runtime: RuntimeOptions): void  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/account/default/change_password`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.auth.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 204)) {
      return;
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 设置手机登录密码，密码必须包含数字和字母，长度8-32个字符
   * @tags account
   * @error InvalidParameterMissing The input parameter {parameter_name} is missing.
   * @error Forbidden User not authorized to operate on the specified APIs.
   * @error InternalError The request has been failed due to some unknown error.
   */
  api setPassword(request: DefaultSetPasswordRequest, runtime: RuntimeOptions): void  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/account/default/set_password`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.auth.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 204)) {
      return;
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 管理员通过账号信息直接获取用户的访问令牌
   * @tags account
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error Forbidden User not authorized to operate on the specified APIs.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error InternalError The request has been failed due to some unknown error.
   */
  api getAccessTokenByLinkInfo(request: GetAccessTokenByLinkInfoRequest, runtime: RuntimeOptions): AccountAccessTokenResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/account/get_access_token_by_link_info`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.auth.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 获取图片验证码，用于人机校验，默认不需要
   * @tags account
   * @error InvalidParameterMissing The input parameter {parameter_name} is missing.
   * @error Forbidden User not authorized to operate on the specified APIs.
   * @error InternalError The request has been failed due to some unknown error.
   */
  api getCaptcha(request: GetCaptchaRequest, runtime: RuntimeOptions): Captcha  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/account/get_captcha`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.auth.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 获取用户认证方式详情
   * @tags account
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error Forbidden User not authorized to operate on the specified APIs.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error InternalError The request has been failed due to some unknown error.
   */
  api getLinkInfo(request: GetByLinkInfoRequest, runtime: RuntimeOptions): LinkInfoResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/account/get_link_info`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.auth.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 获取用户的所有绑定信息
   * @tags account
   * @error InvalidParameterMissing The input parameter {parameter_name} is missing.
   * @error Forbidden User not authorized to operate on the specified APIs.
   * @error InternalError The request has been failed due to some unknown error.
   */
  api getLinkInfoByUserId(request: GetLinkInfoByUserIDRequest, runtime: RuntimeOptions): LinkInfoListResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/account/get_link_info_by_user_id`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.auth.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 绑定用户认证方式
   * @tags account
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error Forbidden User not authorized to operate on the specified APIs.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error AlreadyExist {resource} has already exists. {extra_msg}
   * @error InternalError The request has been failed due to some unknown error.
   */
  api link(request: AccountLinkRequest, runtime: RuntimeOptions): AccountAccessTokenResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/account/link`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.auth.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 查询手机号是否已被注册
   * @tags account
   * @error InvalidParameterMissing The input parameter {parameter_name} is missing.
   * @error Forbidden User not authorized to operate on the specified APIs.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error InternalError The request has been failed due to some unknown error.
   */
  api checkExist(request: MobileCheckExistRequest, runtime: RuntimeOptions): MobileCheckExistResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/account/mobile/check_exist`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.auth.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 通过手机号+短信或密码登录，返回刷新令牌和访问令牌
   * @tags account
   * @error InvalidParameterMissing The input parameter {parameter_name} is missing.
   * @error Forbidden User not authorized to operate on the specified APIs.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error InternalError The request has been failed due to some unknown error.
   */
  api login(request: MobileLoginRequest, runtime: RuntimeOptions): AccountAccessTokenResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/account/mobile/login`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.auth.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 通过手机号+短信验证码注册账号
   * @tags account
   * @error InvalidParameterMissing The input parameter {parameter_name} is missing.
   * @error Forbidden User not authorized to operate on the specified APIs.
   * @error AlreadyExist {resource} has already exists. {extra_msg}
   * @error InternalError The request has been failed due to some unknown error.
   */
  api register(request: MobileRegisterRequest, runtime: RuntimeOptions): AccountAccessTokenResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/account/mobile/register`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.auth.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 发送短信验证码，用于登录、注册、修改密码、绑定等
   * @tags account
   * @error InvalidParameterMissing The input parameter {parameter_name} is missing.
   * @error Forbidden User not authorized to operate on the specified APIs.
   * @error InternalError The request has been failed due to some unknown error.
   */
  api mobileSendSmsCode(request: MobileSendSmsCodeRequest, runtime: RuntimeOptions): MobileSendSmsCodeResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/account/mobile/send_sms_code`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.auth.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 用户通过刷新令牌（refresh_token）获取访问令牌（access_token）
   * @tags account
   * @error InvalidParameterMissing The input parameter {parameter_name} is missing.
   * @error Forbidden User not authorized to operate on the specified APIs.
   * @error InternalError The request has been failed due to some unknown error.
   */
  api token(request: TokenRequest, runtime: RuntimeOptions): AccountAccessTokenResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/account/token`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.auth.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 如果目录拷贝、目录删除不能在限定时间内完成，将访问一个异步任务id，
通过此接口获取异步任务的信息，以确定任务是否执行成功。
   * @tags async_task
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error AccessTokenInvalid AccessToken is invalid. {message}
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api getAsyncTaskInfo(request: CCPGetAsyncTaskRequest, runtime: RuntimeOptions): CCPGetAsyncTaskResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/async_task/get`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 对多个原子操作封装成一个批处理请求，服务端并行处理并打包返回每个操作的执行结果。
支持对文件和文件夹的移动、删除、修改，每个批处理请求最多包含100个原则操作。
   * @tags batch
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error AccessTokenInvalid AccessToken is invalid. {message}
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api operation(request: CCPBatchRequest, runtime: RuntimeOptions): CCPBatchResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/batch`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 支持normal和large两种drive，
large类型的drive用于文件数多的场景，不支持list操作，
当drive的文件数量大于1亿时，建议使用large类型。
   * @tags drive
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error AccessTokenInvalid AccessToken is invalid. {message}
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api createDrive(request: CreateDriveRequest, runtime: RuntimeOptions): CreateDriveResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/drive/create`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 201)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 删除指定drive_id对应的Drive
   * @tags drive
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error AccessTokenInvalid AccessToken is invalid. {message}
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api deleteDrive(request: DeleteDriveRequest, runtime: RuntimeOptions): void  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/drive/delete`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 204)) {
      return;
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 获取指定drive_id对应的Drive详细信息。
   * @tags drive
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error AccessTokenInvalid AccessToken is invalid. {message}
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api getDrive(request: GetDriveRequest, runtime: RuntimeOptions): GetDriveResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/drive/get`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 一个用户可拥有多个drive，在创建drive时通过参数指定是否为这个用户的默认drive，
每个用户只能设置一个默认drive。
   * @tags drive
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error AccessTokenInvalid AccessToken is invalid. {message}
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api getDefaultDrive(request: GetDefaultDriveRequest, runtime: RuntimeOptions): GetDriveResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/drive/get_default_drive`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 管理员列举指定用户的Drive
   * @tags drive
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error AccessTokenInvalid AccessToken is invalid. {message}
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api listDrives(request: ListDriveRequest, runtime: RuntimeOptions): ListDriveResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/drive/list`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 列举当前用户（访问令牌）的Drive
   * @tags drive
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error AccessTokenInvalid AccessToken is invalid. {message}
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api listMyDrives(request: ListMyDriveRequest, runtime: RuntimeOptions): ListDriveResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/drive/list_my_drives`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 更新指定drive_id的Drive信息
   * @tags drive
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error AccessTokenInvalid AccessToken is invalid. {message}
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api updateDrive(request: UpdateDriveRequest, runtime: RuntimeOptions): UpdateDriveResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/drive/update`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 完成文件上传。
   * @tags file
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error AccessTokenInvalid AccessToken is invalid. {message}
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api completeFile(request: CCPCompleteFileRequest, runtime: RuntimeOptions): CCPCompleteFileResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/file/complete`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 指定源文件或文件夹，拷贝到指定的文件夹。
   * @tags file
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error AccessTokenInvalid AccessToken is invalid. {message}
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api copyFile(request: CCPCopyFileRequest, runtime: RuntimeOptions): CCPCopyFileResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/file/copy`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 201)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@isStatusCode(__response, 202)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 在指定文件夹下创建文件或者文件夹，
根文件夹用root表示，其他文件夹使用创建文件夹时返回的file_id。
   * @tags file
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error AccessTokenInvalid AccessToken is invalid. {message}
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error AlreadyExist {resource} has already exists. {extra_msg}
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api createFile(request: CCPCreateFileRequest, runtime: RuntimeOptions): CCPCreateFileResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/file/create`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 201)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 指定文件或文件夹ID，删除文件或者文件夹。
   * @tags file
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error AccessTokenInvalid AccessToken is invalid. {message}
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api deleteFile(request: CCPDeleteFileRequest, runtime: RuntimeOptions): CCPDeleteFileResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/file/delete`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 202)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@isStatusCode(__response, 204)) {
      return null;
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  model DownloadFileRequest {
    DriveID: string(name='DriveID', description='drive id', example='1'),
    FileID: string(name='FileID', description='file id', example='5d79206586bb5dd69fb34c349282718146c55da7'),
    ImageProcess?: string(name='ImageProcess', description='image process', example='image/resize,w_200'),
  }

  /**
   * 指定文件ID，下载文件。
   * @tags file
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error AccessTokenInvalid AccessToken is invalid. {message}
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api downloadFile(request: DownloadFileRequest, runtime: RuntimeOptions): CCPGetDownloadUrlRequest  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'GET';
    pathname = `/v2/file/download`;
    query = @toQuery(request);
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
  } returns {
    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 获取指定文件或文件夹ID的信息。
   * @tags file
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error AccessTokenInvalid AccessToken is invalid. {message}
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api getFile(request: CCPGetFileRequest, runtime: RuntimeOptions): CCPGetFileResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/file/get`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 获取文件的下载地址，调用者可自己设置range头并发下载。
   * @tags file
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error AccessTokenInvalid AccessToken is invalid. {message}
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api getDownloadUrl(request: CCPGetDownloadUrlRequest, runtime: RuntimeOptions): CCPGetDownloadUrlResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/file/get_download_url`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 可指定分片信息，一次获取多个分片的上传地址。
   * @tags file
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error AccessTokenInvalid AccessToken is invalid. {message}
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api getUploadUrl(request: CCPGetUploadUrlRequest, runtime: RuntimeOptions): CCPGetUploadUrlResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/file/get_upload_url`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 列举指定目录下的文件或文件夹。
   * @tags file
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error AccessTokenInvalid AccessToken is invalid. {message}
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api listFile(request: CCPListFileRequest, runtime: RuntimeOptions): CCPListFileResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/file/list`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 列举upload_id对应的已上传分片。
   * @tags file
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error AccessTokenInvalid AccessToken is invalid. {message}
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api listUploadedParts(request: CCPListUploadedPartRequest, runtime: RuntimeOptions): CCPListUploadedPartResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/file/list_uploaded_parts`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 指定源文件或文件夹，移动到指定的文件夹。
   * @tags file
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error AccessTokenInvalid AccessToken is invalid. {message}
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api moveFile(request: CCPMoveFileRequest, runtime: RuntimeOptions): CCPMoveFileResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/file/move`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 根据筛选条件，在指定drive下搜索文件。
   * @tags file
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error AccessTokenInvalid AccessToken is invalid. {message}
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api searchFile(request: CCPSearchFileRequest, runtime: RuntimeOptions): CCPSearchFileResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/file/search`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 对指定的文件或文件夹更新信息。
   * @tags file
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error AccessTokenInvalid AccessToken is invalid. {message}
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api updateFile(request: CCPUpdateFileMetaRequest, runtime: RuntimeOptions): CCPUpdateFileMetaResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/file/update`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 该接口将会创建用户， 只有管理员可以调用
   * @tags user
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api createUser(request: CreateUserRequest, runtime: RuntimeOptions): CreateUserResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/user/create`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 201)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 该接口将会删除用户
   * @tags user
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api deleteUser(request: DeleteUserRequest, runtime: RuntimeOptions): void  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/user/delete`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 204)) {
      return;
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 该接口将会查看用户详细信息
   * @tags user
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api getUser(request: GetUserRequest, runtime: RuntimeOptions): GetUserResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/user/get`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 该接口将会展示用户列表
   * @tags user
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api listUsers(request: ListUserRequest, runtime: RuntimeOptions): ListUserResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/user/list`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 该接口将会根据条件查询用户
   * @tags user
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api searchUser(request: SearchUserRequest, runtime: RuntimeOptions): ListUserResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/user/search`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

  /**
   * 该接口将会更新用户信息
   * @tags user
   * @error InvalidParameter The input parameter {parameter_name} is not valid.
   * @error ForbiddenNoPermission No Permission to access resource {resource_name}.
   * @error NotFound The resource {resource_name} cannot be found. Please check.
   * @error InternalError The request has been failed due to some unknown error.
   * @error ServiceUnavailable The request has failed due to a temporary failure of the server.
   */
  api updateUser(request: UpdateUserRequest, runtime: RuntimeOptions): UpdateUserResponse  {
    var accesskeyId = @getAccessKeyId();
    var accessKeySecret = @getAccessKeySecret();
    var accessToken = @getAccessToken();
    protocol = @getProtocol(@protocol, 'https');
    method = 'POST';
    pathname = `/v2/user/update`;
    headers = {
      host = @getHost(@endpoint, `${@domainId}.api.alicloudccp.com`),
      content-type = 'application/json; charset=utf-8',
    };

    if (@notEmpty(accessToken)) {
      headers.authorization = `Bearer ${accessToken}`;
    } else if (@notEmpty(accesskeyId) && @notEmpty(accessKeySecret)) {
      headers.date = @getRFC2616Date();
      headers.accept = 'application/json';
      headers.x-acs-signature-method = 'HMAC-SHA1';
      headers.x-acs-signature-version = '1.0';
      headers.authorization = `acs ${accesskeyId}:${@getSignature(__request)}`;
    }
    body = @toJSONString(request);
  } returns {
    if (@isStatusCode(__response, 200)) {
      return {
        requestId = __response.headers.x-ca-request-id,
        ...@readAsJSON(__response),
      };
    }

    if (@notEmpty(__response.headers.x-ca-error-message)) {
      throw {
        data = {
          requestId = __response.headers.x-ca-request-id,
          statusCode = __response.statusCode,
          statusMessage = __response.statusMessage,
        },
        message = __response.headers.x-ca-error-message,
      };
    }
    throw {
      data = {
        requestId = __response.headers.x-ca-request-id,
        statusCode = __response.statusCode,
        statusMessage = __response.statusMessage,
      },
      ...@readAsJSON(__response),
    };
  } runtime {
    timeouted = 'retry',
    readTimeout = runtime.readTimeout,
    connectTimeout = runtime.connectTimeout,
    localAddr = runtime.localAddr,
    httpProxy = runtime.httpProxy,
    httpsProxy = runtime.httpsProxy,
    noProxy = runtime.noProxy,
    maxIdleConns = runtime.maxIdleConns,
    socks5Proxy = runtime.socks5Proxy,
    socks5NetWork = runtime.socks5NetWork,
    retry = {
      retryable = runtime.autoretry,
      maxAttempts = @defaultNumber(runtime.maxAttempts, 3),
    },
    backoff = {
      policy = @default(runtime.backoffPolicy, 'no'),
      period = @defaultNumber(runtime.backoffPeriod, 1),
    },
    ignoreSSL = runtime.ignoreSSL
  }

}

